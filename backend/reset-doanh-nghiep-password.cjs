require('dotenv').config();
const bcrypt = require('bcryptjs');
const connection = require('./src/database/connection');

async function resetDoanhNghiepPassword() {
  try {
    console.log('üîß B·∫Øt ƒë·∫ßu reset m·∫≠t kh·∫©u doanh nghi·ªáp...');
    
    // M·∫≠t kh·∫©u m·ªõi
    const newPassword = '123456';
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    // L·∫•y danh s√°ch t·∫•t c·∫£ doanh nghi·ªáp
    const [doanhNghieps] = await connection.query(
      'SELECT id, account_id, ma_doanh_nghiep, ten_cong_ty FROM doanh_nghiep LIMIT 10'
    );
    
    console.log(`üìã T√¨m th·∫•y ${doanhNghieps.length} doanh nghi·ªáp`);
    
    for (const dn of doanhNghieps) {
      // Reset m·∫≠t kh·∫©u trong b·∫£ng accounts (d√πng account_id)
      await connection.query(
        'UPDATE accounts SET password_hash = ? WHERE id = ?',
        [hashedPassword, dn.account_id]
      );
      
      console.log(`‚úÖ Reset m·∫≠t kh·∫©u cho ${dn.ma_doanh_nghiep} - ${dn.ten_cong_ty}`);
    }
    
    console.log('üéâ Ho√†n th√†nh reset m·∫≠t kh·∫©u t·∫•t c·∫£ doanh nghi·ªáp!');
    console.log(`üîë M·∫≠t kh·∫©u m·ªõi: ${newPassword}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói reset m·∫≠t kh·∫©u:', error);
  } finally {
    process.exit(0);
  }
}

// Reset m·∫≠t kh·∫©u cho m·ªôt doanh nghi·ªáp c·ª• th·ªÉ
async function resetSpecificDoanhNghiep(maDN) {
  try {
    console.log(`üîß Reset m·∫≠t kh·∫©u cho doanh nghi·ªáp: ${maDN}`);
    
    const newPassword = '123456';
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    // Ki·ªÉm tra doanh nghi·ªáp c√≥ t·ªìn t·∫°i kh√¥ng
    const [doanhNghiepResult] = await connection.query(
      'SELECT id, account_id, ten_cong_ty, email_cong_ty FROM doanh_nghiep WHERE ma_doanh_nghiep = ?',
      [maDN]
    );
    
    console.log('üîç Query result:', doanhNghiepResult);
    console.log('üîç Type of result:', typeof doanhNghiepResult);
    console.log('üîç Is array:', Array.isArray(doanhNghiepResult));
    
    if (!doanhNghiepResult || doanhNghiepResult.length === 0) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y doanh nghi·ªáp v·ªõi m√£: ${maDN}`);
      
      // Li·ªát k√™ c√°c doanh nghi·ªáp c√≥ s·∫µn
      const [allDN] = await connection.query('SELECT ma_doanh_nghiep, ten_cong_ty FROM doanh_nghiep LIMIT 5');
      console.log('üìã C√°c doanh nghi·ªáp c√≥ s·∫µn:');
      allDN.forEach(dn => {
        console.log(`  - ${dn.ma_doanh_nghiep}: ${dn.ten_cong_ty}`);
      });
      return;
    }
    
    // N·∫øu doanhNghiepResult l√† array, l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
    // N·∫øu l√† object, s·ª≠ d·ª•ng tr·ª±c ti·∫øp
    const dn = Array.isArray(doanhNghiepResult) ? doanhNghiepResult[0] : doanhNghiepResult;
    
    // Reset m·∫≠t kh·∫©u trong b·∫£ng accounts (d√πng account_id)
    await connection.query(
      'UPDATE accounts SET password_hash = ? WHERE id = ?',
      [hashedPassword, dn.account_id]
    );
    
    console.log(`‚úÖ Reset th√†nh c√¥ng cho ${maDN} - ${dn.ten_cong_ty}`);
    console.log(`üîë M·∫≠t kh·∫©u m·ªõi: ${newPassword}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói reset m·∫≠t kh·∫©u:', error);
  } finally {
    process.exit(0);
  }
}

// Ki·ªÉm tra argument t·ª´ command line
const maDN = process.argv[2];

if (maDN) {
  console.log(`üéØ Reset m·∫≠t kh·∫©u cho doanh nghi·ªáp c·ª• th·ªÉ: ${maDN}`);
  resetSpecificDoanhNghiep(maDN);
} else {
  console.log('üîÑ Reset m·∫≠t kh·∫©u cho t·∫•t c·∫£ doanh nghi·ªáp');
  resetDoanhNghiepPassword();
}