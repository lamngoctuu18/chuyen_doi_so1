require('dotenv').config();
const bcrypt = require('bcryptjs');    // Reset m·∫≠t kh·∫©u trong b·∫£ng accounts (s·ª≠ d·ª•ng user_id)
    await connection.query(
      'UPDATE accounts SET password_hash = ? WHERE user_id = ? AND role = "doanh-nghiep"',
      [hashedPassword, maDN]
    );
    
    // Reset m·∫≠t kh·∫©u trong b·∫£ng doanh_nghiep
    await connection.query(
      'UPDATE doanh_nghiep SET password = ? WHERE ma_doanh_nghiep = ?',
      [hashedPassword, maDN]
    );ection = require('./src/database/connection');

async function resetDoanhNghiepPassword() {
  try {
    console.log('üîß B·∫Øt ƒë·∫ßu reset m·∫≠t kh·∫©u doanh nghi·ªáp...');
    
    // M·∫≠t kh·∫©u m·ªõi
    const newPassword = '123456';
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    // L·∫•y danh s√°ch t·∫•t c·∫£ doanh nghi·ªáp
    const [doanhNghieps] = await connection.query(
      'SELECT id, ma_doanh_nghiep, ten_cong_ty, email FROM doanh_nghiep LIMIT 10'
    );
    
    console.log(`üìã T√¨m th·∫•y ${doanhNghieps.length} doanh nghi·ªáp`);
    
    for (const dn of doanhNghieps) {
      // Reset m·∫≠t kh·∫©u trong b·∫£ng accounts (s·ª≠ d·ª•ng user_id)
      await connection.query(
        'UPDATE accounts SET password_hash = ? WHERE user_id = ? AND role = "doanh-nghiep"',
        [hashedPassword, dn.ma_doanh_nghiep]
      );
      
      // Reset m·∫≠t kh·∫©u trong b·∫£ng doanh_nghiep
      await connection.query(
        'UPDATE doanh_nghiep SET password = ? WHERE id = ?',
        [hashedPassword, dn.id]
      );
      
      console.log(`‚úÖ Reset m·∫≠t kh·∫©u cho ${dn.ma_doanh_nghiep} - ${dn.ten_cong_ty}`);
    }
    
    console.log('üéâ Ho√†n th√†nh reset m·∫≠t kh·∫©u t·∫•t c·∫£ doanh nghi·ªáp!');
    console.log(`üîë M·∫≠t kh·∫©u m·ªõi: ${newPassword}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói reset m·∫≠t kh·∫©u:', error);
  } finally {
    process.exit(0);
  }
}

// Reset m·∫≠t kh·∫©u cho m·ªôt doanh nghi·ªáp c·ª• th·ªÉ
async function resetSpecificDoanhNghiep(maDN) {
  try {
    console.log(`üîß Reset m·∫≠t kh·∫©u cho doanh nghi·ªáp: ${maDN}`);
    
    const newPassword = '123456';
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    // Ki·ªÉm tra doanh nghi·ªáp c√≥ t·ªìn t·∫°i kh√¥ng
    const [doanhNghiep] = await connection.query(
      'SELECT id, ten_cong_ty FROM doanh_nghiep WHERE ma_doanh_nghiep = ?',
      [maDN]
    );
    
    if (doanhNghiep.length === 0) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y doanh nghi·ªáp v·ªõi m√£: ${maDN}`);
      return;
    }
    
    // L·∫•y email c·ªßa doanh nghi·ªáp
    const email = `${maDN}@company.dainam.edu.vn`;
    
    // Reset m·∫≠t kh·∫©u trong b·∫£ng accounts
    await connection.query(
      'UPDATE accounts SET password = ? WHERE email = ? AND role = "doanh_nghiep"',
      [hashedPassword, email]
    );
    
    // Reset m·∫≠t kh·∫©u trong b·∫£ng doanh_nghiep
    await connection.query(
      'UPDATE doanh_nghiep SET password = ? WHERE ma_doanh_nghiep = ?',
      [hashedPassword, maDN]
    );
    
    console.log(`‚úÖ Reset th√†nh c√¥ng cho ${maDN} - ${doanhNghiep[0].ten_cong_ty}`);
    console.log(`üîë M·∫≠t kh·∫©u m·ªõi: ${newPassword}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói reset m·∫≠t kh·∫©u:', error);
  } finally {
    process.exit(0);
  }
}

// Ki·ªÉm tra argument t·ª´ command line
const maDN = process.argv[2];

if (maDN) {
  console.log(`üéØ Reset m·∫≠t kh·∫©u cho doanh nghi·ªáp c·ª• th·ªÉ: ${maDN}`);
  resetSpecificDoanhNghiep(maDN);
} else {
  console.log('üîÑ Reset m·∫≠t kh·∫©u cho t·∫•t c·∫£ doanh nghi·ªáp');
  resetDoanhNghiepPassword();
}