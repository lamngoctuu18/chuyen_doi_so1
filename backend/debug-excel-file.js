const ExcelJS = require('exceljs');
const path = require('path');

// Script debug ƒë·ªÉ ki·ªÉm tra file Excel th·ª±c t·∫ø
async function debugExcelFile(filePath) {
  console.log('üîç Debugging Excel file:', filePath);
  
  try {
    // Ki·ªÉm tra file t·ªìn t·∫°i
    const fs = require('fs');
    if (!fs.existsSync(filePath)) {
      console.error('‚ùå File kh√¥ng t·ªìn t·∫°i:', filePath);
      return;
    }
    
    console.log('‚úÖ File t·ªìn t·∫°i, k√≠ch th∆∞·ªõc:', fs.statSync(filePath).size, 'bytes');
    
    // Kh·ªüi t·∫°o workbook
    const workbook = new ExcelJS.Workbook();
    
    console.log('üìñ ƒêang ƒë·ªçc file Excel...');
    await workbook.xlsx.readFile(filePath);
    
    console.log('‚úÖ ƒê·ªçc file th√†nh c√¥ng!');
    console.log('üìä S·ªë worksheet:', workbook.worksheets.length);
    
    // L·∫∑p qua t·∫•t c·∫£ worksheet
    workbook.worksheets.forEach((worksheet, index) => {
      console.log(`\nüìã Worksheet ${index + 1}: "${worksheet.name}"`);
      console.log('   S·ªë h√†ng th·ª±c t·∫ø:', worksheet.actualRowCount);
      console.log('   S·ªë c·ªôt th·ª±c t·∫ø:', worksheet.actualColumnCount);
      console.log('   S·ªë h√†ng c√≥ d·ªØ li·ªáu:', worksheet.rowCount);
      console.log('   S·ªë c·ªôt c√≥ d·ªØ li·ªáu:', worksheet.columnCount);
      
      // Hi·ªÉn th·ªã v√†i h√†ng ƒë·∫ßu
      console.log('   üìù N·ªôi dung 5 h√†ng ƒë·∫ßu:');
      for (let rowNum = 1; rowNum <= Math.min(5, worksheet.actualRowCount); rowNum++) {
        const row = worksheet.getRow(rowNum);
        const rowData = [];
        
        for (let colNum = 1; colNum <= worksheet.actualColumnCount; colNum++) {
          const cell = row.getCell(colNum);
          let value = '';
          
          if (cell.value !== null && cell.value !== undefined) {
            if (typeof cell.value === 'object' && cell.value.text) {
              value = cell.value.text;
            } else if (typeof cell.value === 'object' && cell.value.result) {
              value = cell.value.result;
            } else {
              value = String(cell.value);
            }
          }
          
          rowData.push(value);
        }
        
        console.log(`   H√†ng ${rowNum}:`, rowData);
      }
    });
    
    // Test v·ªõi worksheet ƒë·∫ßu ti√™n
    const worksheet = workbook.worksheets[0];
    if (worksheet) {
      console.log('\nüß™ Testing data extraction from first worksheet:');
      
      // Th·ª≠ c√°c c√°ch kh√°c nhau ƒë·ªÉ l·∫•y headers
      console.log('\nüìç Method 1 - Using getRow(1):');
      const headerRow = worksheet.getRow(1);
      const headers1 = [];
      headerRow.eachCell((cell, colNumber) => {
        let cellValue = '';
        if (cell.value !== null && cell.value !== undefined) {
          if (typeof cell.value === 'object' && cell.value.text) {
            cellValue = cell.value.text;
          } else if (typeof cell.value === 'object' && cell.value.result) {
            cellValue = cell.value.result;
          } else {
            cellValue = String(cell.value);
          }
        }
        headers1.push(cellValue.toLowerCase().trim());
      });
      console.log('Headers method 1:', headers1);
      
      console.log('\nüìç Method 2 - Using values array:');
      const headers2 = [];
      const values = headerRow.values;
      if (Array.isArray(values)) {
        for (let i = 1; i < values.length; i++) { // Skip index 0
          let cellValue = '';
          if (values[i] !== null && values[i] !== undefined) {
            if (typeof values[i] === 'object' && values[i].text) {
              cellValue = values[i].text;
            } else if (typeof values[i] === 'object' && values[i].result) {
              cellValue = values[i].result;
            } else {
              cellValue = String(values[i]);
            }
          }
          headers2.push(cellValue.toLowerCase().trim());
        }
      }
      console.log('Headers method 2:', headers2);
      
      // Test data rows
      console.log('\nüìç Testing data rows:');
      for (let rowNum = 2; rowNum <= Math.min(4, worksheet.actualRowCount); rowNum++) {
        const dataRow = worksheet.getRow(rowNum);
        const rowData = {};
        
        dataRow.eachCell((cell, colNumber) => {
          const header = headers1[colNumber - 1] || `col_${colNumber}`;
          
          let cellValue = '';
          if (cell.value !== null && cell.value !== undefined) {
            if (typeof cell.value === 'object' && cell.value.text) {
              cellValue = cell.value.text;
            } else if (typeof cell.value === 'object' && cell.value.result) {
              cellValue = cell.value.result;
            } else {
              cellValue = String(cell.value);
            }
          }
          
          rowData[header] = cellValue.trim();
        });
        
        console.log(`Data row ${rowNum}:`, rowData);
      }
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªçc file Excel:', error);
    console.error('Chi ti·∫øt l·ªói:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Ch·∫°y debug v·ªõi file th·ª±c t·∫ø
const excelFilePath = 'c:\\Users\\84916\\Downloads\\template-giang-vien.xlsx';
debugExcelFile(excelFilePath);