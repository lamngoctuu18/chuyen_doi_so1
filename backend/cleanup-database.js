const mysql = require('mysql2/promise');
require('dotenv').config();

async function cleanupDatabase() {
  let connection;
  
  try {
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 3306,
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '123',
      database: process.env.DB_NAME || 'quanly_thuctap'
    });

    console.log('üóÇÔ∏è ƒêang ki·ªÉm tra v√† x√≥a c√°c b·∫£ng th·ª´a...');

    // Danh s√°ch b·∫£ng c·∫ßn gi·ªØ l·∫°i (b·∫£ng ch√≠nh)
    const keepTables = [
      'accounts',        // B·∫£ng t√†i kho·∫£n ch√≠nh
      'admin',          // Th√¥ng tin admin
      'sinh_vien',      // Th√¥ng tin sinh vi√™n
      'giang_vien',     // Th√¥ng tin gi·∫£ng vi√™n
      'doanh_nghiep',   // Th√¥ng tin doanh nghi·ªáp
      'internship_assignments',  // Ph√¢n c√¥ng th·ª±c t·∫≠p
      'internship_batches',      // ƒê·ª£t th·ª±c t·∫≠p
      'job_postings',           // Tin tuy·ªÉn d·ª•ng
      'applications',           // ƒê∆°n ·ª©ng tuy·ªÉn
      'weekly_reports',         // B√°o c√°o tu·∫ßn
      'final_reports'           // B√°o c√°o cu·ªëi k·ª≥
    ];

    // Danh s√°ch b·∫£ng c·∫ßn x√≥a (b·∫£ng tr√πng l·∫∑p/kh√¥ng d√πng)
    const tablesToDrop = [
      'users',         // Tr√πng v·ªõi accounts
      'students',      // Tr√πng v·ªõi sinh_vien
      'teachers',      // Tr√πng v·ªõi giang_vien
      'companies'      // Tr√πng v·ªõi doanh_nghiep
    ];

    console.log('\nüìã B·∫£ng s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i:');
    keepTables.forEach(table => console.log(`  ‚úÖ ${table}`));

    console.log('\nüóëÔ∏è B·∫£ng s·∫Ω ƒë∆∞·ª£c x√≥a:');
    tablesToDrop.forEach(table => console.log(`  ‚ùå ${table}`));

    // Ki·ªÉm tra b·∫£ng n√†o t·ªìn t·∫°i
    const [tables] = await connection.execute('SHOW TABLES');
    const existingTables = tables.map(row => Object.values(row)[0]);

    console.log('\nüîÑ ƒêang x√≥a c√°c b·∫£ng th·ª´a...');
    
    for (const table of tablesToDrop) {
      if (existingTables.includes(table)) {
        try {
          await connection.execute(`DROP TABLE IF EXISTS \`${table}\``);
          console.log(`  ‚úÖ ƒê√£ x√≥a b·∫£ng: ${table}`);
        } catch (error) {
          console.log(`  ‚ùå L·ªói khi x√≥a b·∫£ng ${table}: ${error.message}`);
        }
      } else {
        console.log(`  ‚ÑπÔ∏è B·∫£ng ${table} kh√¥ng t·ªìn t·∫°i`);
      }
    }

    // Hi·ªÉn th·ªã danh s√°ch b·∫£ng sau khi cleanup
    console.log('\nüìä Danh s√°ch b·∫£ng sau khi cleanup:');
    const [finalTables] = await connection.execute('SHOW TABLES');
    console.table(finalTables);

    console.log('\n‚úÖ Cleanup database ho√†n t·∫•t!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

cleanupDatabase();