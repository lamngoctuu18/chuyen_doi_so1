const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'H·ªá th·ªëng Qu·∫£n l√Ω Th·ª±c t·∫≠p - API Documentation',
      version: '1.0.0',
      description: `
        API Documentation cho H·ªá th·ªëng Qu·∫£n l√Ω Th·ª±c t·∫≠p - Khoa CNTT ƒê·∫°i h·ªçc ƒê·∫°i Nam
        
        ## üéØ T√≠nh nƒÉng ch√≠nh:
        - **Qu·∫£n l√Ω t√†i kho·∫£n**: Admin, Sinh vi√™n, Gi·∫£ng vi√™n, Doanh nghi·ªáp
        - **Qu·∫£n l√Ω th·ª±c t·∫≠p**: ƒê·ª£t th·ª±c t·∫≠p, ph√¢n c√¥ng, theo d√µi
        - **B√°o c√°o**: Tu·∫ßn, cu·ªëi k·ª≥, th·ªëng k√™
        - **Import/Export**: Excel templates, bulk operations
        
        ## üîê Authentication:
        1) ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token t·∫°i m·ªôt trong c√°c endpoint:
           - POST /api/auth/login (body: { userCode, password })
           - POST /api/auth/login/admin (body: { userId, password })
           - POST /api/auth/login/sinh-vien (body: { maSinhVien, password })
        2) Click n√∫t "Authorize" (g√≥c ph·∫£i tr√™n) v√† d√°n token (kh√¥ng c·∫ßn g√µ ch·ªØ "Bearer ")
        3) Swagger s·∫Ω t·ª± g·ª≠i header \`Authorization: Bearer <token>\` cho c√°c API y√™u c·∫ßu x√°c th·ª±c
        
        L∆∞u √Ω: Token c√≥ h·∫°n d√πng (~24h). N·∫øu token c≈©, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.
        
        ## üì± Li√™n h·ªá:
        - **Email**: admin@dainam.edu.vn
        - **Website**: https://dainam.edu.vn
      `,
      contact: {
        name: 'Khoa CNTT - ƒê·∫°i h·ªçc ƒê·∫°i Nam',
        email: 'admin@dainam.edu.vn',
        url: 'https://dainam.edu.vn'
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT'
      }
    },
    servers: [
      {
        url: 'http://localhost:3001',
        description: 'Development Server'
      },
      {
        url: 'https://api.dainam.edu.vn',
        description: 'Production Server'
      }
    ],
    security: [
      { bearerAuth: [] }
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          description: 'JWT Authorization header using the Bearer scheme'
        }
      },
      schemas: {
        // Common schemas
        ApiResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              description: 'Tr·∫°ng th√°i th√†nh c√¥ng'
            },
            message: {
              type: 'string',
              description: 'Th√¥ng b√°o'
            },
            data: {
              type: 'object',
              description: 'D·ªØ li·ªáu tr·∫£ v·ªÅ'
            },
            error: {
              type: 'string',
              description: 'Th√¥ng b√°o l·ªói (n·∫øu c√≥)'
            }
          }
        },
        
        // Auth schemas
        LoginRequest: {
          type: 'object',
          required: ['userId', 'password', 'role'],
          properties: {
            userId: {
              type: 'string',
              description: 'M√£ ƒëƒÉng nh·∫≠p',
              example: 'SV001'
            },
            password: {
              type: 'string',
              description: 'M·∫≠t kh·∫©u',
              example: '123456'
            },
            role: {
              type: 'string',
              enum: ['admin', 'sinh-vien', 'giang-vien', 'doanh-nghiep'],
              description: 'Vai tr√≤ ng∆∞·ªùi d√πng',
              example: 'sinh-vien'
            }
          }
        },
        
        LoginResponse: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            message: { type: 'string' },
            data: {
              type: 'object',
              properties: {
                token: { type: 'string', description: 'JWT Token' },
                user: {
                  type: 'object',
                  properties: {
                    id: { type: 'integer' },
                    userId: { type: 'string' },
                    role: { type: 'string' },
                    name: { type: 'string' }
                  }
                }
              }
            }
          }
        },

        // User schemas
        SinhVien: {
          type: 'object',
          properties: {
            id: { type: 'integer', description: 'ID sinh vi√™n' },
            ma_sinh_vien: { type: 'string', description: 'M√£ sinh vi√™n' },
            ho_ten: { type: 'string', description: 'H·ªç t√™n' },
            email: { type: 'string', description: 'Email' },
            so_dien_thoai: { type: 'string', description: 'S·ªë ƒëi·ªán tho·∫°i' },
            lop: { type: 'string', description: 'L·ªõp' },
            khoa: { type: 'string', description: 'Khoa' },
            nam_hoc: { type: 'string', description: 'NƒÉm h·ªçc' },
            vi_tri_muon_ung_tuyen_thuc_tap: { type: 'string', description: 'V·ªã tr√≠ mu·ªën ·ª©ng tuy·ªÉn' },
            don_vi_thuc_tap: { type: 'string', description: 'ƒê∆°n v·ªã th·ª±c t·∫≠p' },
            trang_thai: { 
              type: 'string', 
              enum: ['chua-thuc-tap', 'dang-thuc-tap', 'hoan-thanh', 'tam-dung'],
              description: 'Tr·∫°ng th√°i th·ª±c t·∫≠p'
            },
            created_at: { type: 'string', format: 'date-time' },
            updated_at: { type: 'string', format: 'date-time' }
          }
        },

        DoanhNghiep: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            ma_doanh_nghiep: { type: 'string' },
            ten_doanh_nghiep: { type: 'string' },
            dia_chi: { type: 'string' },
            so_dien_thoai: { type: 'string' },
            email: { type: 'string' },
            website: { type: 'string' },
            nguoi_lien_he: { type: 'string' },
            chuc_vu_lien_he: { type: 'string' },
            linh_vuc: { type: 'string' },
            quy_mo: { type: 'string' },
            mo_ta: { type: 'text' },
            trang_thai: {
              type: 'string',
              enum: ['hoat-dong', 'tam-dung', 'khong-hop-tac']
            }
          }
        },

        GiangVien: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            ma_giang_vien: { type: 'string' },
            ho_ten: { type: 'string' },
            email: { type: 'string' },
            so_dien_thoai: { type: 'string' },
            khoa: { type: 'string' },
            chuyen_mon: { type: 'string' },
            trinh_do: { type: 'string' }
          }
        },

        // Report schemas
        BaoCaoThucTap: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            sinh_vien_id: { type: 'integer' },
            tuan_thu: { type: 'integer' },
            noi_dung: { type: 'string' },
            van_de_gap_phai: { type: 'string' },
            ke_hoach_tuan_sau: { type: 'string' },
            diem_giang_vien: { type: 'number', minimum: 0, maximum: 10 },
            diem_doanh_nghiep: { type: 'number', minimum: 0, maximum: 10 },
            nhan_xet_giang_vien: { type: 'string' },
            nhan_xet_doanh_nghiep: { type: 'string' },
            trang_thai: {
              type: 'string',
              enum: ['chua-nop', 'cho-duyet', 'da-duyet', 'can-sua']
            },
            ngay_nop: { type: 'string', format: 'date-time' }
          }
        },

        // Student Report Submission schemas
        StudentReportUpload: {
          type: 'object',
          required: ['ma_sinh_vien', 'dot_thuc_tap_id', 'loai_bao_cao', 'report_file'],
          properties: {
            ma_sinh_vien: {
              type: 'string',
              description: 'M√£ sinh vi√™n',
              example: 'SV001'
            },
            dot_thuc_tap_id: {
              type: 'integer',
              description: 'ID ƒë·ª£t th·ª±c t·∫≠p',
              example: 1
            },
            loai_bao_cao: {
              type: 'string',
              enum: ['tuan', 'thang', 'cuoi_ky', 'tong_ket'],
              description: 'Lo·∫°i b√°o c√°o',
              example: 'tuan'
            },
            ghi_chu: {
              type: 'string',
              description: 'Ghi ch√∫',
              example: 'B√°o c√°o tu·∫ßn 1'
            },
            report_file: {
              type: 'string',
              format: 'binary',
              description: 'File b√°o c√°o (PDF, Word, Excel, PowerPoint - Max 10MB)'
            }
          }
        },

        StudentReport: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            ma_sinh_vien: { type: 'string' },
            ten_sinh_vien: { type: 'string' },
            lop: { type: 'string' },
            dot_thuc_tap_id: { type: 'integer' },
            ten_dot_thuc_tap: { type: 'string' },
            ma_giang_vien: { type: 'string' },
            ten_giang_vien: { type: 'string' },
            loai_bao_cao: {
              type: 'string',
              enum: ['tuan', 'thang', 'cuoi_ky', 'tong_ket']
            },
            file_name: { type: 'string' },
            file_path: { type: 'string' },
            file_size: { type: 'integer' },
            mime_type: { type: 'string' },
            trang_thai_duyet: {
              type: 'string',
              enum: ['cho_duyet', 'da_duyet', 'tu_choi'],
              description: 'Tr·∫°ng th√°i duy·ªát'
            },
            nguoi_duyet: { type: 'string' },
            ngay_duyet: { type: 'string', format: 'date-time' },
            nhan_xet: { type: 'string' },
            ly_do_tu_choi: { type: 'string' },
            ghi_chu: { type: 'string' },
            ngay_nop: { type: 'string', format: 'date-time' }
          }
        },

        ReviewReportRequest: {
          type: 'object',
          required: ['nguoi_duyet', 'trang_thai_duyet'],
          properties: {
            nguoi_duyet: {
              type: 'string',
              description: 'M√£ gi·∫£ng vi√™n duy·ªát',
              example: 'GV001'
            },
            trang_thai_duyet: {
              type: 'string',
              enum: ['da_duyet', 'tu_choi'],
              description: 'Tr·∫°ng th√°i duy·ªát',
              example: 'da_duyet'
            },
            nhan_xet: {
              type: 'string',
              description: 'Nh·∫≠n x√©t/L√Ω do t·ª´ ch·ªëi',
              example: 'B√°o c√°o chi ti·∫øt, ƒë·∫ßy ƒë·ªß th√¥ng tin'
            }
          }
        },

        ReportStatistics: {
          type: 'object',
          properties: {
            tong_so_bao_cao: { type: 'integer' },
            cho_duyet: { type: 'integer' },
            da_duyet: { type: 'integer' },
            tu_choi: { type: 'integer' },
            thong_ke_theo_loai: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  loai_bao_cao: { type: 'string' },
                  so_luong: { type: 'integer' }
                }
              }
            }
          }
        },

        // Password Reset schemas
        PasswordResetRequest: {
          type: 'object',
          required: ['email'],
          properties: {
            email: {
              type: 'string',
              format: 'email',
              description: 'Email ƒëƒÉng k√Ω t√†i kho·∫£n',
              example: 'student@dainam.edu.vn'
            }
          }
        },

        PasswordResetResponse: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            message: { type: 'string' },
            data: {
              type: 'object',
              properties: {
                email: { type: 'string' },
                expires_in_minutes: { type: 'integer', example: 10 },
                reset_code: { 
                  type: 'string', 
                  description: 'M√£ x√°c th·ª±c 6 s·ªë (ch·ªâ hi·ªán trong development)',
                  example: '123456'
                }
              }
            }
          }
        },

        VerifyResetCodeRequest: {
          type: 'object',
          required: ['email', 'reset_code'],
          properties: {
            email: {
              type: 'string',
              format: 'email',
              example: 'student@dainam.edu.vn'
            },
            reset_code: {
              type: 'string',
              pattern: '^[0-9]{6}$',
              description: 'M√£ x√°c th·ª±c 6 s·ªë',
              example: '123456'
            }
          }
        },

        ResetPasswordRequest: {
          type: 'object',
          required: ['email', 'reset_code', 'new_password'],
          properties: {
            email: {
              type: 'string',
              format: 'email',
              example: 'student@dainam.edu.vn'
            },
            reset_code: {
              type: 'string',
              pattern: '^[0-9]{6}$',
              example: '123456'
            },
            new_password: {
              type: 'string',
              minLength: 6,
              description: 'M·∫≠t kh·∫©u m·ªõi (t·ªëi thi·ªÉu 6 k√Ω t·ª±)',
              example: 'NewPassword123!'
            }
          }
        },

        PasswordResetHistory: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            email: { type: 'string' },
            reset_code: { type: 'string' },
            expiration_time: { type: 'string', format: 'date-time' },
            used_flag: { type: 'integer', enum: [0, 1] },
            created_at: { type: 'string', format: 'date-time' },
            trang_thai: {
              type: 'string',
              enum: ['ƒê√£ s·ª≠ d·ª•ng', 'H·∫øt h·∫°n', 'C√≤n hi·ªáu l·ª±c']
            }
          }
        },

        RateLimitStatus: {
          type: 'object',
          properties: {
            is_limited: { type: 'boolean' },
            request_count: { type: 'integer' },
            max_requests: { type: 'integer' },
            time_window_minutes: { type: 'integer' },
            message: { type: 'string' }
          }
        },

        // Error schemas
        ValidationError: {
          type: 'object',
          properties: {
            success: { type: 'boolean', example: false },
            message: { type: 'string', example: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' },
            errors: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  field: { type: 'string' },
                  message: { type: 'string' }
                }
              }
            }
          }
        },

        UnauthorizedError: {
          type: 'object',
          properties: {
            success: { type: 'boolean', example: false },
            message: { type: 'string', example: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' }
          }
        },

        NotFoundError: {
          type: 'object',
          properties: {
            success: { type: 'boolean', example: false },
            message: { type: 'string', example: 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu' }
          }
        }
      },
      responses: {
        ValidationError: {
          description: 'L·ªói validation d·ªØ li·ªáu',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/ValidationError' }
            }
          }
        },
        UnauthorizedError: {
          description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/UnauthorizedError' }
            }
          }
        },
        NotFoundError: {
          description: 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/NotFoundError' }
            }
          }
        },
        ServerError: {
          description: 'L·ªói server',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  success: { type: 'boolean', example: false },
                  message: { type: 'string', example: 'L·ªói server' }
                }
              }
            }
          }
        }
      }
    },
    security: [
      {
        bearerAuth: []
      }
    ],
    tags: [
      {
        name: 'Authentication',
        description: 'üîê X√°c th·ª±c v√† ph√¢n quy·ªÅn (Login, Logout, Token refresh)'
      },
      {
        name: 'Admin',
        description: 'üë®‚Äçüíº Qu·∫£n l√Ω h·ªá th·ªëng (Admin dashboard, user management)'
      },
      {
        name: 'Sinh Vi√™n',
        description: 'üë®‚Äçüéì Qu·∫£n l√Ω sinh vi√™n (Students CRUD, profile, registration)'
      },
      {
        name: 'Gi·∫£ng Vi√™n',
        description: 'üë®‚Äçüè´ Qu·∫£n l√Ω gi·∫£ng vi√™n (Teachers CRUD, assignments, evaluations)'
      },
      {
        name: 'Doanh Nghi·ªáp',
        description: 'üè¢ Qu·∫£n l√Ω doanh nghi·ªáp (Companies CRUD, internship positions)'
      },
      {
        name: 'ƒê·ª£t Th·ª±c T·∫≠p',
        description: 'üìÖ Qu·∫£n l√Ω ƒë·ª£t th·ª±c t·∫≠p (Internship batches, periods)'
      },
      {
        name: 'Ph√¢n C√¥ng Th·ª±c T·∫≠p',
        description: 'üìã Ph√¢n c√¥ng sinh vi√™n - gi·∫£ng vi√™n (Student-teacher assignments)'
      },
      {
        name: 'ƒêƒÉng K√Ω Th·ª±c T·∫≠p',
        description: '‚úçÔ∏è ƒêƒÉng k√Ω th·ª±c t·∫≠p c·ªßa sinh vi√™n v√† doanh nghi·ªáp'
      },
      {
        name: 'B√°o C√°o Th·ª±c T·∫≠p',
        description: 'üìä B√°o c√°o th·ª±c t·∫≠p (Weekly, monthly, final reports)'
      },
      {
        name: 'B√°o C√°o Sinh Vi√™n',
        description: 'üìù B√°o c√°o n·ªôp b·ªüi sinh vi√™n (Student submitted reports)'
      },
      {
        name: 'N·ªôp B√°o C√°o',
        description: 'üì§ Upload v√† qu·∫£n l√Ω b√°o c√°o (File submissions, approvals)'
      },
      {
        name: 'ƒê√°nh Gi√° Doanh Nghi·ªáp',
        description: '‚≠ê ƒê√°nh gi√° doanh nghi·ªáp c·ªßa gi·∫£ng vi√™n (Company evaluations)'
      },
      {
        name: 'ƒê·ªïi M·∫≠t Kh·∫©u',
        description: 'üîë Qu·∫£n l√Ω ƒë·ªïi m·∫≠t kh·∫©u (Password reset, forgot password)'
      },
      {
        name: 'T√†i Kho·∫£n',
        description: 'üë§ Qu·∫£n l√Ω t√†i kho·∫£n (Accounts, profile management)'
      },
      {
        name: 'Import/Export',
        description: 'üìÅ Import/Export d·ªØ li·ªáu Excel (Bulk operations)'
      },
      {
        name: 'Th√¥ng B√°o',
        description: 'üîî Qu·∫£n l√Ω th√¥ng b√°o (Notifications)'
      },
      {
        name: 'Dashboard',
        description: 'üìà Th·ªëng k√™ v√† b√°o c√°o t·ªïng h·ª£p (Statistics, analytics)'
      },
      {
        name: 'Files',
        description: 'üìé Qu·∫£n l√Ω files (File upload, download)'
      },
      {
        name: 'Utilities',
        description: 'üîß Ti·ªán √≠ch h·ªá th·ªëng (Health check, system info)'
      }
    ]
  },
  apis: [
    './src/routes/*.js',
    './src/routes/**/*.js',
    './src/controllers/*.js',
    './server.js'
  ]
};

const specs = swaggerJsdoc(options);

// Custom CSS ƒë·ªÉ l√†m ƒë·∫πp Swagger UI
const customCss = `
  .swagger-ui .topbar { display: none }
  .swagger-ui .info { margin: 20px 0; }
  .swagger-ui .info .title { 
    color: #1f2937; 
    font-size: 2.5rem;
    font-weight: bold;
  }
  .swagger-ui .info .description { 
    color: #4b5563; 
    font-size: 1.1rem;
    line-height: 1.6;
  }
  .swagger-ui .scheme-container { 
    background: #f3f4f6; 
    padding: 20px; 
    border-radius: 8px;
    margin: 20px 0;
  }
  .swagger-ui .opblock .opblock-summary { 
    border-left: 4px solid #3b82f6;
    padding-left: 15px;
  }
  .swagger-ui .opblock.opblock-get .opblock-summary { 
    border-left-color: #10b981; 
  }
  .swagger-ui .opblock.opblock-post .opblock-summary { 
    border-left-color: #3b82f6; 
  }
  .swagger-ui .opblock.opblock-put .opblock-summary { 
    border-left-color: #f59e0b; 
  }
  .swagger-ui .opblock.opblock-delete .opblock-summary { 
    border-left-color: #ef4444; 
  }
  .swagger-ui .btn.authorize { 
    background: #3b82f6;
    border-color: #3b82f6;
  }
  .swagger-ui .btn.authorize:hover { 
    background: #2563eb;
    border-color: #2563eb;
  }
`;

const swaggerOptions = {
  customCss,
  customSiteTitle: 'API Docs - Qu·∫£n l√Ω Th·ª±c t·∫≠p',
  customfavIcon: '/favicon.ico',
  swaggerOptions: {
    persistAuthorization: true,
    displayRequestDuration: true,
    filter: true,
    tryItOutEnabled: true,
    requestInterceptor: (req) => {
      req.headers['X-Requested-With'] = 'SwaggerUI';
      return req;
    }
  }
};

module.exports = {
  specs,
  swaggerUi,
  swaggerOptions
};