const ExcelImportService = require('../services/ExcelImportService');
const Account = require('../models/Account');
const { deleteFile } = require('../middleware/uploadExcel');
const path = require('path');

class ImportController {
  
  // POST /api/import/students - Import danh s√°ch sinh vi√™n t·ª´ Excel
  static async importStudents(req, res) {
    let filePath = null;
    
    try {
      if (!req.file) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng c√≥ file Excel ƒë∆∞·ª£c upload',
          data: null
        });
      }
      
      filePath = req.file.path;
      const options = {
        updateExisting: req.body.updateExisting === 'true' || false,
        createUsers: req.body.createUsers !== 'false' // m·∫∑c ƒë·ªãnh l√† true
      };
      
      console.log('üìÅ ƒêang x·ª≠ l√Ω file:', req.file.originalname);
      console.log('‚öôÔ∏è Options:', options);
      
      // B∆∞·ªõc 1: Parse file Excel
      const parseResult = await ExcelImportService.parseExcelFile(filePath);
      
      if (parseResult.errors.length > 0 && parseResult.students.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'File Excel c√≥ l·ªói v√† kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o',
          data: {
            totalRows: parseResult.totalRows,
            errors: parseResult.errors
          }
        });
      }
      
      // B∆∞·ªõc 2: Import v√†o database th·∫≠t
      const importResult = await ExcelImportService.importToDatabase(parseResult.students, options);
      
      // B∆∞·ªõc 3: T·ªïng h·ª£p k·∫øt qu·∫£
      const finalResult = {
        file: {
          originalName: req.file.originalname,
          size: req.file.size,
          uploadTime: new Date().toISOString()
        },
        parsing: {
          totalRows: parseResult.totalRows,
          validRows: parseResult.validRows,
          parseErrors: parseResult.errorRows,
          parseErrorDetails: parseResult.errors
        },
        import: {
          total: importResult.total,
          success: importResult.success,
          updated: importResult.updated,
          failed: importResult.failed,
          importErrors: importResult.errors
        },
        summary: {
          status: importResult.success > 0 || importResult.updated > 0 ? 'success' : 'failed',
          message: `ƒê√£ x·ª≠ l√Ω ${parseResult.totalRows} d√≤ng. Th√†nh c√¥ng: ${importResult.success}, C·∫≠p nh·∫≠t: ${importResult.updated}, L·ªói: ${importResult.failed + parseResult.errorRows}`
        }
      };
      
      // X√≥a file sau khi x·ª≠ l√Ω
      try {
        await deleteFile(filePath);
      } catch (error) {
        console.error('L·ªói x√≥a file:', error);
      }
      
      const statusCode = finalResult.summary.status === 'success' ? 200 : 207; // 207 Multi-Status
      
      res.status(statusCode).json({
        success: finalResult.summary.status === 'success',
        message: finalResult.summary.message,
        data: finalResult
      });
      
    } catch (error) {
      console.error('L·ªói import Excel:', error);
      
      // X√≥a file n·∫øu c√≥ l·ªói
      if (filePath) {
        try {
          await deleteFile(filePath);
        } catch (deleteError) {
          console.error('L·ªói x√≥a file:', deleteError);
        }
      }
      
      res.status(500).json({
        success: false,
        message: `L·ªói x·ª≠ l√Ω file Excel: ${error.message}`,
        data: null
      });
    }
  }
  
  // GET /api/import/template - Download template Excel
  static async downloadTemplate(req, res) {
    try {
      const workbook = await ExcelImportService.createTemplate();
      
      // Set headers cho file download
      res.setHeader(
        'Content-Type',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      );
      res.setHeader(
        'Content-Disposition',
        'attachment; filename="template_danh_sach_sinh_vien.xlsx"'
      );
      
      // Ghi workbook v√†o response
      await workbook.xlsx.write(res);
      res.end();
      
    } catch (error) {
      console.error('L·ªói t·∫°o template:', error);
      res.status(500).json({
        success: false,
        message: `L·ªói t·∫°o template Excel: ${error.message}`,
        data: null
      });
    }
  }
  
  // POST /api/import/validate - Validate file Excel tr∆∞·ªõc khi import
  static async validateExcel(req, res) {
    let filePath = null;
    
    try {
      if (!req.file) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng c√≥ file Excel ƒë∆∞·ª£c upload',
          data: null
        });
      }
      
      filePath = req.file.path;
      
      console.log('üîç ƒêang validate file:', req.file.originalname);
      
      // Parse v√† validate file
      const parseResult = await ExcelImportService.parseExcelFile(filePath);
      
      // X√≥a file sau khi validate
      try {
        await deleteFile(filePath);
      } catch (error) {
        console.error('L·ªói x√≥a file:', error);
      }
      
      const validationResult = {
        file: {
          originalName: req.file.originalname,
          size: req.file.size,
          validationTime: new Date().toISOString()
        },
        validation: {
          totalRows: parseResult.totalRows,
          validRows: parseResult.validRows,
          errorRows: parseResult.errorRows,
          errors: parseResult.errors,
          isValid: parseResult.students.length > 0,
          canImport: parseResult.students.length > 0
        },
        preview: parseResult.students.slice(0, 5).map(student => ({
          maSV: student.maSV,
          hoTen: student.hoTen,
          email: student.email,
          lop: student.lop,
          khoa: student.khoa
        }))
      };
      
      res.json({
        success: true,
        message: validationResult.validation.isValid 
          ? `File h·ª£p l·ªá v·ªõi ${parseResult.validRows} sinh vi√™n` 
          : 'File c√≥ l·ªói, kh√¥ng th·ªÉ import',
        data: validationResult
      });
      
    } catch (error) {
      console.error('L·ªói validate Excel:', error);
      
      // X√≥a file n·∫øu c√≥ l·ªói
      if (filePath) {
        try {
          await deleteFile(filePath);
        } catch (deleteError) {
          console.error('L·ªói x√≥a file:', deleteError);
        }
      }
      
      res.status(500).json({
        success: false,
        message: `L·ªói validate file Excel: ${error.message}`,
        data: null
      });
    }
  }
  
  // POST /api/import/preview/:type - Preview file Excel tr∆∞·ªõc khi import
  static async previewFile(req, res) {
    let filePath = null;
    
    try {
      if (!req.file) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng c√≥ file Excel ƒë∆∞·ª£c upload'
        });
      }
      
      filePath = req.file.path;
      const accountType = req.params.type;
      
      console.log('üîç Preview file:', req.file.originalname, 'Type:', accountType);
      
      // Parse file Excel
      const parseResult = await ExcelImportService.parseExcelFile(filePath, accountType);
      
      // T·∫°o response data
      let responseData = {
        totalRows: 0,
        columns: [],
        sampleData: []
      };
      
      if (accountType === 'sinh-vien' && parseResult.students) {
        responseData = {
          totalRows: parseResult.students.length,
          columns: ['M√£ sinh vi√™n', 'H·ªç t√™n', 'Email', 'L·ªõp', 'Khoa'],
          sampleData: parseResult.students.slice(0, 3).map(student => ({
            'M√£ sinh vi√™n': student.maSinhVien,
            'H·ªç t√™n': student.hoTen,
            'Email': student.email,
            'L·ªõp': student.lop,
            'Khoa': student.khoa
          }))
        };
      } else if (accountType === 'giang-vien' && parseResult.giangViens) {
        responseData = {
          totalRows: parseResult.giangViens.length,
          columns: ['M√£ gi·∫£ng vi√™n', 'H·ªç t√™n', 'Email', 'Khoa', 'B·ªô m√¥n'],
          sampleData: parseResult.giangViens.slice(0, 3).map(gv => ({
            'M√£ gi·∫£ng vi√™n': gv.maGiangVien,
            'H·ªç t√™n': gv.hoTen,
            'Email': gv.email,
            'Khoa': gv.khoa,
            'B·ªô m√¥n': gv.boMon
          }))
        };
      } else if (accountType === 'doanh-nghiep' && parseResult.doanhNghieps) {
        responseData = {
          totalRows: parseResult.doanhNghieps.length,
          columns: ['M√£ doanh nghi·ªáp', 'T√™n doanh nghi·ªáp', 'Email', 'Ng∆∞·ªùi li√™n h·ªá'],
          sampleData: parseResult.doanhNghieps.slice(0, 3).map(dn => ({
            'M√£ doanh nghi·ªáp': dn.maDoanhNghiep,
            'T√™n doanh nghi·ªáp': dn.tenDoanhNghiep,
            'Email': dn.email,
            'Ng∆∞·ªùi li√™n h·ªá': dn.nguoiLienHe
          }))
        };
      }
      
      res.json({
        success: true,
        message: 'Preview file th√†nh c√¥ng',
        data: responseData
      });
      
    } catch (error) {
      console.error('‚ùå Preview file error:', error);
      res.status(500).json({
        success: false,
        message: `L·ªói preview file: ${error.message}`
      });
    } finally {
      // X√≥a file t·∫°m
      if (filePath) {
        try {
          await deleteFile(filePath);
        } catch (deleteError) {
          console.error('L·ªói x√≥a file t·∫°m:', deleteError);
        }
      }
    }
  }

  // GET /api/import/guide - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng import
  static async getImportGuide(req, res) {
    try {
      const guide = {
        title: 'H∆∞·ªõng d·∫´n Import danh s√°ch sinh vi√™n t·ª´ Excel',
        steps: [
          {
            step: 1,
            title: 'Chu·∫©n b·ªã file Excel',
            description: 'T·∫£i template ho·∫∑c chu·∫©n b·ªã file Excel v·ªõi c√°c c·ªôt c·∫ßn thi·∫øt',
            required_columns: ['M√£ sinh vi√™n', 'H·ªç v√† t√™n', 'M·∫≠t kh·∫©u'],
            optional_columns: ['Email', 'L·ªõp', 'Khoa', 'S·ªë ƒëi·ªán tho·∫°i']
          },
          {
            step: 2,
            title: 'Validate file',
            description: 'S·ª≠ d·ª•ng endpoint /api/import/validate ƒë·ªÉ ki·ªÉm tra file tr∆∞·ªõc khi import',
            endpoint: 'POST /api/import/validate'
          },
          {
            step: 3,
            title: 'Import d·ªØ li·ªáu',
            description: 'S·ª≠ d·ª•ng endpoint /api/import/students ƒë·ªÉ import danh s√°ch sinh vi√™n',
            endpoint: 'POST /api/import/students',
            options: {
              updateExisting: 'true/false - C√≥ c·∫≠p nh·∫≠t sinh vi√™n ƒë√£ t·ªìn t·∫°i kh√¥ng',
              createUsers: 'true/false - C√≥ t·∫°o t√†i kho·∫£n ƒëƒÉng nh·∫≠p kh√¥ng'
            }
          }
        ],
        notes: [
          'File Excel ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xls ho·∫∑c .xlsx',
          'K√≠ch th∆∞·ªõc file t·ªëi ƒëa 10MB',
          'Email s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông theo format: masv@student.dainam.edu.vn n·∫øu kh√¥ng c√≥',
          'M·∫≠t kh·∫©u s·∫Ω ƒë∆∞·ª£c m√£ h√≥a t·ª± ƒë·ªông khi l∆∞u v√†o database',
          'Khoa m·∫∑c ƒë·ªãnh l√† "C√¥ng ngh·ªá th√¥ng tin" n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh'
        ],
        endpoints: {
          download_template: 'GET /api/import/template',
          validate_file: 'POST /api/import/validate',
          import_students: 'POST /api/import/students',
          get_guide: 'GET /api/import/guide'
        }
      };
      
      res.json({
        success: true,
        message: 'H∆∞·ªõng d·∫´n import sinh vi√™n t·ª´ Excel',
        data: guide
      });
      
    } catch (error) {
      res.status(500).json({
        success: false,
        message: error.message,
        data: null
      });
    }
  }
}

module.exports = ImportController;