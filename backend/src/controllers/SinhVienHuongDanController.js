const ExcelJS = require('exceljs');
const SinhVienHuongDan = require('../models/SinhVienHuongDan');
const GiangVien = require('../models/GiangVien');
const { deleteFile } = require('../middleware/uploadExcel');
const db = require('../database/connection');

class SinhVienHuongDanController {

  /**
   * POST /api/sinh-vien-huong-dan/import
   * Import danh s√°ch sinh vi√™n h∆∞·ªõng d·∫´n t·ª´ Excel
   */
  static async importFromExcel(req, res) {
    let filePath = null;
    
    try {
      if (!req.file) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng c√≥ file Excel ƒë∆∞·ª£c upload'
        });
      }

      filePath = req.file.path;
      console.log('üìÅ ƒêang x·ª≠ l√Ω file sinh vi√™n h∆∞·ªõng d·∫´n:', req.file.originalname);
      console.log('üìÅ File path:', filePath);

      // Parse Excel file
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(filePath);
      const worksheet = workbook.getWorksheet(1);

      if (!worksheet) {
        throw new Error('Kh√¥ng t√¨m th·∫•y worksheet trong file Excel');
      }

      console.log('üìä Worksheet loaded, total rows:', worksheet.actualRowCount);

      // Strategy: detect header row with likely labels, map indices, then build records per row
      const teacherCounts = {};
      const data = [];
      let headerRowIndex = -1;
      const headerMap = {};

      // find header row with detailed logging
      worksheet.eachRow((row, rowNumber) => {
        // Try different approaches to get row values
        const rawVals = row.values || [];
        let vals = [];
        
        // Handle different Excel structures
        if (rawVals.length > 0 && rawVals[0] === null) {
          // Case: first cell is null, skip it
          vals = rawVals.slice(1).map(v => (v ? v.toString().trim() : ''));
        } else {
          // Case: no leading null
          vals = rawVals.map(v => (v ? v.toString().trim() : ''));
        }
        
        const rowText = vals.join(' ').toLowerCase();
        
        console.log(`üîç Row ${rowNumber}: [${vals.join(', ')}]`);
        console.log(`üîç Row text: "${rowText}"`);
        
        // Check if this row contains header indicators - more specific detection
        const hasSTT = vals.some(v => v && v.toLowerCase().trim() === 'stt');
        const hasMaSV = vals.some(v => v && (v.toLowerCase().includes('m√£ sv') || v.toLowerCase().includes('m√£ sinh vi√™n')));
        const hasHoTen = vals.some(v => v && v.toLowerCase().includes('h·ªç t√™n'));
        const hasGiangVien = vals.some(v => v && v.toLowerCase().includes('gi·∫£ng vi√™n h∆∞·ªõng d·∫´n'));
        
        const isHeaderRow = hasSTT && hasMaSV && hasHoTen && hasGiangVien;
        
        console.log(`üîç Header check for row ${rowNumber}: STT=${hasSTT}, MaSV=${hasMaSV}, HoTen=${hasHoTen}, GiangVien=${hasGiangVien}, IsHeader=${isHeaderRow}`);
        
        if (headerRowIndex === -1 && isHeaderRow) {
          headerRowIndex = rowNumber;
          console.log(`‚úÖ Found header row at ${rowNumber}`);
          
          vals.forEach((h, idx) => {
            if (!h) return;
            const hs = h.toLowerCase().trim();
            console.log(`üîç Column ${idx}: "${h}" -> "${hs}"`);
            // Use idx directly since we already handled the offset above
            const actualIdx = rawVals[0] === null ? idx + 1 : idx;
            
            // student code
            if (hs.includes('m√£ sv') || hs.includes('m√£ sinh vi√™n') || hs.includes('mssv') || hs.includes('msv')) {
              headerMap.maSinhVien = actualIdx;
              console.log(`  ‚úÖ Mapped maSinhVien to column ${actualIdx}`);
            }
            // student name
            if ((hs.includes('h·ªç t√™n') || hs.includes('h·ªç v√† t√™n') || hs === 'h·ªç t√™n') && !hs.includes('gi·∫£ng vi√™n')) {
              headerMap.hoTen = actualIdx;
              console.log(`  ‚úÖ Mapped hoTen to column ${actualIdx}`);
            }
            // email phone class
            if (hs.includes('email') && !hs.includes('gi·∫£ng vi√™n')) {
              headerMap.email = actualIdx;
              console.log(`  ‚úÖ Mapped email to column ${actualIdx}`);
            }
            if (hs.includes('s·ªë ƒët') || hs.includes('ƒëi·ªán tho·∫°i') || hs.includes('sƒët')) {
              headerMap.soDienThoai = actualIdx;
              console.log(`  ‚úÖ Mapped soDienThoai to column ${actualIdx}`);
            }
            if (hs.includes('l·ªõp')) {
              headerMap.lop = actualIdx;
              console.log(`  ‚úÖ Mapped lop to column ${actualIdx}`);
            }
            if (hs.includes('ng√†y sinh') || hs.includes('dob')) {
              headerMap.ngaySinh = actualIdx;
              console.log(`  ‚úÖ Mapped ngaySinh to column ${actualIdx}`);
            }
            // internship prefs
            if (hs.includes('v·ªã tr√≠') && (hs.includes('mong mu·ªën') || hs.includes('th·ª±c t·∫≠p'))) {
              headerMap.viTri = actualIdx;
              console.log(`  ‚úÖ Mapped viTri to column ${actualIdx}`);
            }
            if (hs.includes('nguy·ªán v·ªçng')) {
              headerMap.nguyenVong = actualIdx;
              console.log(`  ‚úÖ Mapped nguyenVong to column ${actualIdx}`);
            }
            if (hs.includes('doanh nghi·ªáp') || (hs.includes('th·ª±c t·∫≠p') && !hs.includes('v·ªã tr√≠'))) {
              headerMap.doanhNghiep = actualIdx;
              console.log(`  ‚úÖ Mapped doanhNghiep to column ${actualIdx}`);
            }
            // teacher - more flexible matching
            if (hs.includes('gi·∫£ng vi√™n') && hs.includes('h∆∞·ªõng d·∫´n')) {
              headerMap.giangVien = actualIdx;
              console.log(`  ‚úÖ Mapped giangVien to column ${actualIdx}`);
            } else if (hs === 'gi·∫£ng vi√™n h∆∞·ªõng d·∫´n') {
              headerMap.giangVien = actualIdx;
              console.log(`  ‚úÖ Mapped giangVien (exact match) to column ${actualIdx}`);
            } else if (/(^|\b)gvhd(\b|$)/.test(hs) || hs === 'gv' || hs.startsWith('gv ')) {
              headerMap.giangVien = actualIdx;
              console.log(`  ‚úÖ Mapped giangVien (code match) to column ${actualIdx}`);
            }
          });
          
          console.log('üìã Final header mapping:', headerMap);
        }
      });

      if (headerRowIndex === -1 || !headerMap.giangVien) {
        throw new Error('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c d√≤ng ti√™u ƒë·ªÅ ho·∫∑c c·ªôt Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n');
      }

      // First pass: collect all teacher names to look up their codes
      const teacherNames = new Set();
      worksheet.eachRow((row, rowNumber) => {
        if (rowNumber <= headerRowIndex) return;
        const v = row.values;
        const get = (idx) => (idx && v[idx] ? v[idx].toString().trim() : '');
        const teacherCell = get(headerMap.giangVien);
        if (teacherCell) {
          teacherNames.add(teacherCell);
        }
      });

      // Look up teacher codes from database based on names
      const teacherLookup = {};
      const missingTeachers = [];
      
      if (teacherNames.size > 0) {
        console.log('üîç Looking up teacher codes for names:', Array.from(teacherNames));
        
        for (const teacherName of teacherNames) {
          try {
            // Try to find teacher by exact name match or partial match
            const searchQuery = `
              SELECT ma_giang_vien, ho_ten FROM giang_vien 
              WHERE ho_ten LIKE ? OR ho_ten = ?
              LIMIT 1
            `;
            const results = await db.query(searchQuery, [`%${teacherName}%`, teacherName]);
            
            if (results && results.length > 0) {
              teacherLookup[teacherName] = results[0].ma_giang_vien;
              console.log(`‚úÖ Found: "${teacherName}" -> ${results[0].ma_giang_vien} (${results[0].ho_ten})`);
            } else {
              // Fallback: try to extract number from name and create GV code
              const m = teacherName.match(/(\d+)$/);
              if (m) {
                const generatedCode = `GV${m[1].padStart(3, '0')}`;
                teacherLookup[teacherName] = generatedCode;
                
                // Add to missing teachers list for creation
                missingTeachers.push({
                  ma_giang_vien: generatedCode,
                  ho_ten: teacherName,
                  email: `${generatedCode.toLowerCase()}@university.edu.vn`,
                  so_dien_thoai: '',
                  khoa: 'CNTT',
                  bo_mon: 'C√¥ng ngh·ªá th√¥ng tin'
                });
                
                console.log(`‚ö†Ô∏è Not found in DB, will create: "${teacherName}" -> ${generatedCode}`);
              } else {
                console.log(`‚ùå Cannot resolve teacher: "${teacherName}"`);
                teacherLookup[teacherName] = null;
              }
            }
          } catch (error) {
            console.error(`‚ùå Error looking up teacher "${teacherName}":`, error);
            teacherLookup[teacherName] = null;
          }
        }
        
        // Create missing teachers in database
        if (missingTeachers.length > 0) {
          console.log(`üèóÔ∏è Creating ${missingTeachers.length} missing teachers...`);
          for (const teacher of missingTeachers) {
            try {
              await db.query(
                'INSERT INTO giang_vien (ma_giang_vien, ho_ten, email, so_dien_thoai, khoa, bo_mon, so_sinh_vien_huong_dan) VALUES (?, ?, ?, ?, ?, ?, 0)',
                [teacher.ma_giang_vien, teacher.ho_ten, teacher.email, teacher.so_dien_thoai, teacher.khoa, teacher.bo_mon]
              );
              console.log(`‚úÖ Created teacher: ${teacher.ma_giang_vien} - ${teacher.ho_ten}`);
            } catch (error) {
              console.error(`‚ùå Error creating teacher ${teacher.ma_giang_vien}:`, error.message);
              // If creation fails, remove from lookup to prevent foreign key error
              teacherLookup[teacher.ho_ten] = null;
            }
          }
        }
      }

      // Second pass: build records with resolved teacher codes
      worksheet.eachRow((row, rowNumber) => {
        if (rowNumber <= headerRowIndex) return;
        const v = row.values;
        const get = (idx) => (idx && v[idx] ? v[idx].toString().trim() : '');
        const maSinhVien = get(headerMap.maSinhVien);
        const hoTen = get(headerMap.hoTen);
        const teacherCell = get(headerMap.giangVien);
        if (!maSinhVien && !hoTen && !teacherCell) return;
        if (!teacherCell) return; // ignore rows without teacher

        const maGiangVien = teacherLookup[teacherCell];
        if (!maGiangVien) {
          console.log(`‚ö†Ô∏è Skipping row ${rowNumber}: Cannot resolve teacher "${teacherCell}"`);
          return;
        }

        const record = {
          ma_giang_vien: maGiangVien,
          ten_giang_vien: teacherCell, // Save original teacher name
          ma_sinh_vien: maSinhVien || '',
          ho_ten_sinh_vien: hoTen || '',
          email_sinh_vien: get(headerMap.email),
          so_dien_thoai_sinh_vien: get(headerMap.soDienThoai),
          lop_sinh_vien: get(headerMap.lop),
          ngay_sinh_sinh_vien: headerMap.ngaySinh ? SinhVienHuongDanController.parseDate(v[headerMap.ngaySinh]) : null,
          vi_tri_thuc_tap: get(headerMap.viTri),
          doanh_nghiep_thuc_tap: get(headerMap.doanhNghiep),
          nguyen_vong_thuc_tap: get(headerMap.nguyenVong)
        };

        data.push(record);
        teacherCounts[maGiangVien] = (teacherCounts[maGiangVien] || 0) + 1;
      });

      console.log('üìä Prepared records:', { rows: data.length, teacherCounts });

      if (data.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ª£p l·ªá trong file Excel. H√£y ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng file.'
        });
      }

      // Import v√†o b·∫£ng sinh_vien_huong_dan v√† c·∫≠p nh·∫≠t ƒë·∫øm theo transaction
      const importResult = await SinhVienHuongDan.importBatch(data);

      // Clean up file
      if (filePath) {
        deleteFile(filePath);
      }

      return res.json({
        success: true,
        message: importResult.message,
        data: {
          teacherCounts: importResult.teacherCounts,
          totalProcessed: importResult.totalProcessed
        }
      });

    } catch (error) {
      console.error('‚ùå Import sinh vi√™n h∆∞·ªõng d·∫´n l·ªói:', error);
      
      // Clean up file on error
      if (filePath) {
        deleteFile(filePath);
      }

      return res.status(500).json({
        success: false,
        message: 'L·ªói import file Excel: ' + error.message
      });
    }
  }

  /**
   * GET /api/sinh-vien-huong-dan/:maGiangVien
   * L·∫•y danh s√°ch sinh vi√™n h∆∞·ªõng d·∫´n c·ªßa m·ªôt gi·∫£ng vi√™n
   */
  static async getByGiangVien(req, res) {
    try {
      const { maGiangVien } = req.params;
      const students = await SinhVienHuongDan.getByGiangVien(maGiangVien);
      
      return res.json({
        success: true,
        data: students
      });
    } catch (error) {
      console.error('‚ùå Get sinh vi√™n h∆∞·ªõng d·∫´n l·ªói:', error);
      return res.status(500).json({
        success: false,
        message: 'L·ªói l·∫•y danh s√°ch sinh vi√™n h∆∞·ªõng d·∫´n'
      });
    }
  }

  /**
   * POST /api/sinh-vien-huong-dan/update-counts
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng sinh vi√™n h∆∞·ªõng d·∫´n cho t·∫•t c·∫£ gi·∫£ng vi√™n
   */
  static async updateAllCounts(req, res) {
    try {
      await SinhVienHuongDan.updateAllTeacherCounts();
      
      return res.json({
        success: true,
        message: 'ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng sinh vi√™n h∆∞·ªõng d·∫´n cho t·∫•t c·∫£ gi·∫£ng vi√™n'
      });
    } catch (error) {
      console.error('‚ùå Update counts l·ªói:', error);
      return res.status(500).json({
        success: false,
        message: 'L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng sinh vi√™n h∆∞·ªõng d·∫´n'
      });
    }
  }

  /**
   * Helper method to parse date from various formats
   */
  static parseDate(value) {
    if (!value) return null;
    
    try {
      // Handle Excel date serial number
      if (typeof value === 'number') {
        const date = new Date((value - 25569) * 86400 * 1000);
        return date.toISOString().split('T')[0];
      }
      
      // Handle string date
      const dateStr = value.toString().trim();
      if (dateStr.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) {
        const [day, month, year] = dateStr.split('/');
        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
      }
      
      // Try to parse as ISO date
      const date = new Date(dateStr);
      if (!isNaN(date.getTime())) {
        return date.toISOString().split('T')[0];
      }
      
      return null;
    } catch (error) {
      return null;
    }
  }
}

module.exports = SinhVienHuongDanController;