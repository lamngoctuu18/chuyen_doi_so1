// Service: Excel Import v·ªõi c·∫•u tr√∫c b·∫£ng m·ªõi
// File: src/services\ExcelImportService.js

const ExcelJS = require('exceljs');
const bcrypt = require('bcryptjs');
const Account = require('../models/Account');
const SinhVien = require('../models/SinhVien');
const GiangVien = require('../models/GiangVien');
const DoanhNghiep = require('../models/DoanhNghiep');
const Admin = require('../models/Admin');

class ExcelImportService {
  
  // ƒê·ªçc v√† parse file Excel theo lo·∫°i t√†i kho·∫£n
  static async parseExcelFile(filePath, accountType) {
    try {
      const workbook = new ExcelJS.Workbook();
      
      // C·∫•u h√¨nh ƒë·ªÉ ƒë·ªçc file Excel v·ªõi encoding ƒë√∫ng
      const options = {
        ignoreEmpty: false,
        sheetStubs: false,
        bookSST: false
      };
      
      await workbook.xlsx.readFile(filePath, options);
      
      // L·∫•y worksheet ƒë·∫ßu ti√™n
      const worksheet = workbook.worksheets[0];
      
      if (!worksheet) {
        throw new Error('File Excel kh√¥ng c√≥ worksheet n√†o ho·∫∑c file b·ªã l·ªói');
      }
      
      // Ki·ªÉm tra worksheet c√≥ d·ªØ li·ªáu kh√¥ng
      if (worksheet.rowCount === 0) {
        throw new Error('File Excel kh√¥ng c√≥ d·ªØ li·ªáu');
      }
      
      console.log(`üìã ƒê·ªçc file Excel: ${worksheet.rowCount} h√†ng, ${worksheet.columnCount} c·ªôt`);
      
      // Debug: In ra header row
      const headerRow = worksheet.getRow(1);
      console.log('üìù Headers found:');
      headerRow.eachCell((cell, colNumber) => {
        console.log(`  ${colNumber}: "${cell.value}"`);
      });
      
      let results = [];
      const errors = [];
      
      // Parse d·ªØ li·ªáu theo lo·∫°i t√†i kho·∫£n
      switch (accountType) {
        case 'sinh-vien':
          results = await this.parseSinhVienData(worksheet, errors);
          break;
        case 'sinh-vien-profile':
          results = await this.parseSinhVienProfileData(worksheet, errors);
          break;
        case 'giang-vien':
          results = await this.parseGiangVienData(worksheet, errors);
          break;
        case 'doanh-nghiep':
          results = await this.parseDoanhNghiepData(worksheet, errors);
          break;
        case 'admin':
          results = await this.parseAdminData(worksheet, errors);
          break;
        default:
          throw new Error('Lo·∫°i t√†i kho·∫£n kh√¥ng h·ª£p l·ªá');
      }
      
      return {
        success: true,
        data: results,
        errors: errors,
        totalRows: results.length,
        errorCount: errors.length
      };
      
    } catch (error) {
      console.error('Error parsing Excel file:', error);
      throw new Error(`L·ªói ƒë·ªçc file Excel: ${error.message}`);
    }
  }

  // Parse d·ªØ li·ªáu sinh vi√™n
  static async parseSinhVienData(worksheet, errors) {
    const sinhViens = [];
    
    // ƒê·ªçc header ƒë·ªÉ x√°c ƒë·ªãnh c·ªôt
    const headerRow = worksheet.getRow(1);
    const headers = this.mapSinhVienHeaders(headerRow);
    
    // Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc cho import t√†i kho·∫£n
    if (!headers.maSinhVien || !headers.hoTen || !headers.email) {
      throw new Error('File Excel thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: M√£ sinh vi√™n, H·ªç t√™n, Email');
    }
    
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ h√†ng th·ª© 2 tr·ªü ƒëi
    const rowCount = worksheet.rowCount;
    
    for (let rowNumber = 2; rowNumber <= rowCount; rowNumber++) {
      try {
        const row = worksheet.getRow(rowNumber);
        
        // Ki·ªÉm tra h√†ng r·ªóng
        if (this.isEmptyRow(row)) {
          continue;
        }
        
        const sinhVienData = {
          maSinhVien: this.getCellValue(row, headers.maSinhVien),
          hoTen: this.getCellValue(row, headers.hoTen),
          email: this.getCellValue(row, headers.email),
          password: this.getCellValue(row, headers.matKhau) || this.getCellValue(row, headers.maSinhVien), // M·∫∑c ƒë·ªãnh password = m√£ sinh vi√™n
          lop: this.getCellValue(row, headers.lop),
          khoa: this.getCellValue(row, headers.khoa),
          nganh: this.getCellValue(row, headers.nganh),
          khoaHoc: this.getCellValue(row, headers.khoaHoc),
          ngaySinh: this.getCellValue(row, headers.ngaySinh),
          gioiTinh: this.getCellValue(row, headers.gioiTinh),
          diaChi: this.getCellValue(row, headers.diaChi),
          soDienThoai: this.getCellValue(row, headers.soDienThoai),
          emailCaNhan: this.getCellValue(row, headers.emailCaNhan),
          gpa: this.getCellValue(row, headers.gpa),
          tinhTrangHocTap: this.getCellValue(row, headers.tinhTrangHocTap) || 'ƒêang h·ªçc',
          viTriMuonUngTuyenThucTap: this.getCellValue(row, headers.viTriMuonUngTuyen),
          donViThucTap: this.getCellValue(row, headers.donViThucTap),
          nguyenVongThucTap: this.getCellValue(row, headers.nguyenVongThucTap),
          giangVienHuongDan: this.getCellValue(row, headers.giangVienHuongDan)
        };
        
        // Debug log ƒë·ªÉ ki·ªÉm tra c√°c c·ªôt m·ªõi
        if (rowNumber === 2) { // Ch·ªâ log row ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh spam
          console.log('Debug - Headers found:', headers);
          console.log('Debug - New fields:', {
            viTriMuonUngTuyen: headers.viTriMuonUngTuyen,
            donViThucTap: headers.donViThucTap,
            nguyenVongThucTap: headers.nguyenVongThucTap,
            giangVienHuongDan: headers.giangVienHuongDan,
            data: {
              viTriMuonUngTuyenThucTap: sinhVienData.viTriMuonUngTuyenThucTap,
              donViThucTap: sinhVienData.donViThucTap,
              nguyenVongThucTap: sinhVienData.nguyenVongThucTap,
              giangVienHuongDan: sinhVienData.giangVienHuongDan
            }
          });
        }
        
        // Validate d·ªØ li·ªáu
        this.validateSinhVienData(sinhVienData, rowNumber);
        
        sinhViens.push(sinhVienData);
        
      } catch (error) {
        errors.push({
          row: rowNumber,
          error: error.message
        });
      }
    }
    
    return sinhViens;
  }

  // Parse d·ªØ li·ªáu sinh vi√™n profile (kh√¥ng validation nghi√™m ng·∫∑t)
  static async parseSinhVienProfileData(worksheet, errors) {
    const sinhViens = [];
    
    // ƒê·ªçc header ƒë·ªÉ x√°c ƒë·ªãnh c·ªôt
    const headerRow = worksheet.getRow(1);
    const headers = this.mapSinhVienHeaders(headerRow);
    
    // Kh√¥ng ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc - cho ph√©p import linh ho·∫°t
    
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ h√†ng th·ª© 2 tr·ªü ƒëi
    const rowCount = worksheet.rowCount;
    
    for (let rowNumber = 2; rowNumber <= rowCount; rowNumber++) {
      try {
        const row = worksheet.getRow(rowNumber);
        
        // Ki·ªÉm tra h√†ng r·ªóng
        if (this.isEmptyRow(row)) {
          continue;
        }
        
        const sinhVienData = {
          maSinhVien: this.getCellValue(row, headers.maSinhVien),
          hoTen: this.getCellValue(row, headers.hoTen),
          email: this.getCellValue(row, headers.email),
          password: this.getCellValue(row, headers.matKhau) || this.getCellValue(row, headers.maSinhVien), // M·∫∑c ƒë·ªãnh password = m√£ sinh vi√™n
          lop: this.getCellValue(row, headers.lop),
          khoa: this.getCellValue(row, headers.khoa),
          nganh: this.getCellValue(row, headers.nganh),
          khoaHoc: this.getCellValue(row, headers.khoaHoc),
          ngaySinh: this.getCellValue(row, headers.ngaySinh),
          gioiTinh: this.getCellValue(row, headers.gioiTinh),
          diaChi: this.getCellValue(row, headers.diaChi),
          soDienThoai: this.getCellValue(row, headers.soDienThoai),
          emailCaNhan: this.getCellValue(row, headers.emailCaNhan),
          gpa: this.getCellValue(row, headers.gpa),
          tinhTrangHocTap: this.getCellValue(row, headers.tinhTrangHocTap) || 'ƒêang h·ªçc',
          viTriMuonUngTuyenThucTap: this.getCellValue(row, headers.viTriMuonUngTuyen),
          donViThucTap: this.getCellValue(row, headers.donViThucTap),
          nguyenVongThucTap: this.getCellValue(row, headers.nguyenVongThucTap),
          giangVienHuongDan: this.getCellValue(row, headers.giangVienHuongDan)
        };
        
        // Validate email format (n·∫øu c√≥ email)
        this.validateSinhVienProfileData(sinhVienData, rowNumber);
        
        sinhViens.push(sinhVienData);
        
      } catch (error) {
        errors.push({
          row: rowNumber,
          error: error.message
        });
      }
    }
    
    return sinhViens;
  }

  // Parse d·ªØ li·ªáu gi·∫£ng vi√™n
  static async parseGiangVienData(worksheet, errors) {
    const giangViens = [];
    
    // ƒê·ªçc header ƒë·ªÉ x√°c ƒë·ªãnh c·ªôt
    const headerRow = worksheet.getRow(1);
    const headers = this.mapGiangVienHeaders(headerRow);
    
    // Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
    if (!headers.maGiangVien || !headers.hoTen || !headers.email || !headers.khoa) {
      throw new Error('File Excel thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: M√£ gi·∫£ng vi√™n, H·ªç t√™n, Email, Khoa');
    }
    
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ h√†ng th·ª© 2 tr·ªü ƒëi
    const rowCount = worksheet.rowCount;
    
    for (let rowNumber = 2; rowNumber <= rowCount; rowNumber++) {
      try {
        const row = worksheet.getRow(rowNumber);
        
        // Ki·ªÉm tra h√†ng r·ªóng
        if (this.isEmptyRow(row)) {
          continue;
        }
        
        const giangVienData = {
          maGiangVien: this.getCellValue(row, headers.maGiangVien),
          hoTen: this.getCellValue(row, headers.hoTen),
          email: this.getCellValue(row, headers.email),
          password: this.getCellValue(row, headers.matKhau) || this.getCellValue(row, headers.maGiangVien), // M·∫∑c ƒë·ªãnh password = m√£ gi·∫£ng vi√™n
          khoa: this.getCellValue(row, headers.khoa),
          boMon: this.getCellValue(row, headers.boMon),
          chucVu: this.getCellValue(row, headers.chucVu),
          hocVi: this.getCellValue(row, headers.hocVi),
          chuyenMon: this.getCellValue(row, headers.chuyenMon),
          soDienThoai: this.getCellValue(row, headers.soDienThoai),
          emailCaNhan: this.getCellValue(row, headers.emailCaNhan),
          diaChi: this.getCellValue(row, headers.diaChi),
          kinhNghiemLamViec: this.getCellValue(row, headers.kinhNghiemLamViec),
          bangCap: this.getCellValue(row, headers.bangCap)
        };
        
        // Validate d·ªØ li·ªáu
        this.validateGiangVienData(giangVienData, rowNumber);
        
        giangViens.push(giangVienData);
        
      } catch (error) {
        errors.push({
          row: rowNumber,
          error: error.message
        });
      }
    }
    
    return giangViens;
  }

  // Parse d·ªØ li·ªáu doanh nghi·ªáp
  static async parseDoanhNghiepData(worksheet, errors) {
    const doanhNghieps = [];
    
    // ƒê·ªçc header ƒë·ªÉ x√°c ƒë·ªãnh c·ªôt
    const headerRow = worksheet.getRow(1);
    const headers = this.mapDoanhNghiepHeaders(headerRow);
    
    // Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
    if (!headers.maDoanhNghiep || !headers.tenCongTy || !headers.tenNguoiLienHe || !headers.email || !headers.diaChiCongTy || !headers.soDienThoai) {
      throw new Error('File Excel thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: M√£ doanh nghi·ªáp, T√™n c√¥ng ty, T√™n ng∆∞·ªùi li√™n h·ªá, Email, ƒê·ªãa ch·ªâ, S·ªë ƒëi·ªán tho·∫°i');
    }
    
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ h√†ng th·ª© 2 tr·ªü ƒëi
    const rowCount = worksheet.rowCount;
    
    for (let rowNumber = 2; rowNumber <= rowCount; rowNumber++) {
      try {
        const row = worksheet.getRow(rowNumber);
        
        // Ki·ªÉm tra h√†ng r·ªóng
        if (this.isEmptyRow(row)) {
          continue;
        }
        
        const doanhNghiepData = {
          maDoanhNghiep: this.getCellValue(row, headers.maDoanhNghiep),
          tenCongTy: this.getCellValue(row, headers.tenCongTy),
          tenNguoiLienHe: this.getCellValue(row, headers.tenNguoiLienHe),
          email: this.getCellValue(row, headers.email),
          password: this.getCellValue(row, headers.matKhau) || this.getCellValue(row, headers.maDoanhNghiep), // M·∫∑c ƒë·ªãnh password = m√£ doanh nghi·ªáp
          chucVuNguoiLienHe: this.getCellValue(row, headers.chucVuNguoiLienHe),
          diaChiCongTy: this.getCellValue(row, headers.diaChiCongTy),
          soDienThoai: this.getCellValue(row, headers.soDienThoai),
          emailCongTy: this.getCellValue(row, headers.emailCongTy),
          website: this.getCellValue(row, headers.website),
          linhVucHoatDong: this.getCellValue(row, headers.linhVucHoatDong),
          quyMoNhanSu: this.getCellValue(row, headers.quyMoNhanSu),
          moTaCongTy: this.getCellValue(row, headers.moTaCongTy),
          yeuCauThucTap: this.getCellValue(row, headers.yeuCauThucTap),
          soLuongNhanThucTap: parseInt(this.getCellValue(row, headers.soLuongNhanThucTap)) || 0,
          thoiGianThucTap: this.getCellValue(row, headers.thoiGianThucTap),
          diaChiThucTap: this.getCellValue(row, headers.diaChiThucTap),
          trangThaiHopTac: this.getCellValue(row, headers.trangThaiHopTac) || 'ƒêang h·ª£p t√°c'
        };
        
        // Validate d·ªØ li·ªáu
        this.validateDoanhNghiepData(doanhNghiepData, rowNumber);
        
        doanhNghieps.push(doanhNghiepData);
        
      } catch (error) {
        errors.push({
          row: rowNumber,
          error: error.message
        });
      }
    }
    
    return doanhNghieps;
  }

  // Parse d·ªØ li·ªáu admin
  static async parseAdminData(worksheet, errors) {
    const admins = [];
    
    // ƒê·ªçc header ƒë·ªÉ x√°c ƒë·ªãnh c·ªôt
    const headerRow = worksheet.getRow(1);
    const headers = this.mapAdminHeaders(headerRow);
    
    // Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
    if (!headers.userId || !headers.fullName || !headers.email) {
      throw new Error('File Excel thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: User ID, H·ªç t√™n, Email');
    }
    
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ h√†ng th·ª© 2 tr·ªü ƒëi
    const rowCount = worksheet.rowCount;
    
    for (let rowNumber = 2; rowNumber <= rowCount; rowNumber++) {
      try {
        const row = worksheet.getRow(rowNumber);
        
        // Ki·ªÉm tra h√†ng r·ªóng
        if (this.isEmptyRow(row)) {
          continue;
        }
        
        const adminData = {
          userId: this.getCellValue(row, headers.userId),
          fullName: this.getCellValue(row, headers.fullName),
          email: this.getCellValue(row, headers.email),
          password: this.getCellValue(row, headers.matKhau) || this.getCellValue(row, headers.userId), // M·∫∑c ƒë·ªãnh password = user ID
          phone: this.getCellValue(row, headers.phone),
          position: this.getCellValue(row, headers.position)
        };
        
        // Validate d·ªØ li·ªáu
        this.validateAdminData(adminData, rowNumber);
        
        admins.push(adminData);
        
      } catch (error) {
        errors.push({
          row: rowNumber,
          error: error.message
        });
      }
    }
    
    return admins;
  }

  // Import d·ªØ li·ªáu v√†o database
  static async importToDatabase(accountType, data, options = {}) {
    try {
      console.log('ImportToDatabase called with:', { accountType, dataCount: data.length });
      console.log('First data item:', data[0]);
      
      const results = {
        accountsCreated: 0,
        accountsUpdated: 0,
        profilesCreated: 0,
        profilesUpdated: 0,
        errors: []
      };

  const fillEmptyOnly = options.fillEmptyOnly === true; // only fill empty fields for profiles

  for (const item of data) {
        // Khai b√°o userId ngo√†i try block ƒë·ªÉ c√≥ th·ªÉ d√πng trong catch
        let accountId;
        let userId;
        
        try {
          console.log('Processing item:', item);
          
          switch (accountType) {
            case 'sinh-vien':
              userId = item.maSinhVien;
              break;
            case 'giang-vien':
              userId = item.maGiangVien;
              break;
            case 'doanh-nghiep':
              userId = item.maDoanhNghiep;
              break;
            case 'admin':
              userId = item.userId;
              break;
          }
          
          console.log('UserID extracted:', userId);
          
          // ƒê·ªëi v·ªõi sinh vi√™n, cho ph√©p import m√† kh√¥ng c·∫ßn m√£ sinh vi√™n (ch·ªâ c·∫≠p nh·∫≠t profile)
          if (!userId && accountType !== 'sinh-vien') {
            throw new Error(`Kh√¥ng t√¨m th·∫•y m√£ ƒë·ªãnh danh cho ${accountType}. D·ªØ li·ªáu: ${JSON.stringify(item)}`);
          }
          
          // N·∫øu l√† sinh vi√™n v√† kh√¥ng c√≥ m√£ sinh vi√™n, b·ªè qua vi·ªác t·∫°o/c·∫≠p nh·∫≠t account
          if (accountType === 'sinh-vien' && !userId) {
            console.log('B·ªè qua sinh vi√™n kh√¥ng c√≥ m√£ sinh vi√™n');
            continue;
          }
          
          // Ki·ªÉm tra account ƒë√£ t·ªìn t·∫°i
          const existingAccount = await Account.findByUserId(userId);
          
          if (existingAccount) {
            // C·∫≠p nh·∫≠t password n·∫øu c√≥
            if (item.password) {
              await Account.updatePassword(userId, item.password);
            }
            accountId = existingAccount.id;
            results.accountsUpdated++;
          } else {
            // T·∫°o account m·ªõi
            const accountResult = await Account.create({
              userId: userId,
              email: item.email,
              password: item.password,
              role: accountType
            });
            accountId = accountResult.insertId;
            results.accountsCreated++;
          }
          
          // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t profile theo lo·∫°i
          await this.createOrUpdateProfile(accountType, accountId, item, results, { fillEmptyOnly });
          
        } catch (error) {
          results.errors.push({
            userId: userId,
            error: error.message
          });
        }
      }
      
      return results;
      
    } catch (error) {
      console.error('Error importing to database:', error);
      throw error;
    }
  }

  // Import ch·ªâ profile (kh√¥ng t·∫°o t√†i kho·∫£n)
  static async importProfileOnly(accountType, data, options = {}) {
    try {
      console.log('ImportProfileOnly called with:', { accountType, dataCount: data.length });
      
      const results = {
        profilesUpdated: 0,
        profilesSkipped: 0,
        errors: []
      };

      const fillEmptyOnly = options.fillEmptyOnly === true;

      for (const item of data) {
        try {
          console.log('Processing profile item:', item);
          
          // Ch·ªâ x·ª≠ l√Ω sinh vi√™n c√≥ m√£ sinh vi√™n
          if (accountType === 'sinh-vien' && item.maSinhVien) {
            // T√¨m sinh vi√™n theo m√£ sinh vi√™n
            const existingSV = await SinhVien.findByMaSinhVien(item.maSinhVien);
            if (existingSV) {
              if (fillEmptyOnly) {
                await SinhVien.fillEmptyColumnsByMaSinhVien(item.maSinhVien, item);
              } else {
                await SinhVien.updateByMaSinhVien(item.maSinhVien, item);
              }
              results.profilesUpdated++;
            } else {
              console.log(`Sinh vi√™n ${item.maSinhVien} kh√¥ng t·ªìn t·∫°i, b·ªè qua`);
              results.profilesSkipped++;
            }
          } else {
            console.log('B·ªè qua d√≤ng kh√¥ng c√≥ m√£ sinh vi√™n');
            results.profilesSkipped++;
          }
          
        } catch (error) {
          results.errors.push({
            maSinhVien: item.maSinhVien || 'N/A',
            error: error.message
          });
        }
      }
      
      return results;
      
    } catch (error) {
      console.error('Error importing profile only:', error);
      throw error;
    }
  }

  // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t profile theo lo·∫°i t√†i kho·∫£n
  static async createOrUpdateProfile(accountType, accountId, data, results, options = {}) {
    switch (accountType) {
      case 'sinh-vien':
        // ∆Øu ti√™n t√¨m theo m√£ SV ƒë·ªÉ tr√°nh t·∫°o tr√πng, v√¨ c√≥ th·ªÉ account_id m·ªõi
        const existingByCode = await SinhVien.findByMaSinhVien(data.maSinhVien);
        const existingSV = existingByCode || (await SinhVien.findByAccountId(accountId));
        if (existingSV) {
          if (options.fillEmptyOnly) {
            await SinhVien.fillEmptyColumnsByMaSinhVien(data.maSinhVien, data);
          } else {
            await SinhVien.updateByMaSinhVien(data.maSinhVien, data);
          }
          results.profilesUpdated++;
        } else {
          await SinhVien.create({ ...data, accountId });
          results.profilesCreated++;
        }
        break;
        
      case 'giang-vien':
        console.log('üîç Processing giang-vien for accountId:', accountId, 'data:', JSON.stringify(data, null, 2));
        const existingGV = await GiangVien.findByAccountId(accountId);
        console.log('üîç Existing GV result:', JSON.stringify(existingGV, null, 2));
        if (existingGV && existingGV.success) {
          console.log('üîÑ Updating existing GV with maGiangVien:', data.maGiangVien);
          const updateResult = await GiangVien.updateByMaGiangVien(data.maGiangVien, data);
          console.log('‚úÖ Update result:', JSON.stringify(updateResult, null, 2));
          results.profilesUpdated++;
        } else {
          console.log('‚ûï Creating new GV with data:', JSON.stringify({ ...data, accountId }, null, 2));
          const createResult = await GiangVien.create({ ...data, accountId });
          console.log('‚úÖ Create result:', JSON.stringify(createResult, null, 2));
          results.profilesCreated++;
        }
        break;
        
      case 'doanh-nghiep':
        const existingDN = await DoanhNghiep.findByAccountId(accountId);
        if (existingDN) {
          await DoanhNghiep.updateByMaDoanhNghiep(data.maDoanhNghiep, data);
          results.profilesUpdated++;
        } else {
          await DoanhNghiep.create({ ...data, accountId });
          results.profilesCreated++;
        }
        break;
        
      case 'admin':
        const existingAdmin = await Admin.findByAccountId(accountId);
        if (existingAdmin) {
          await Admin.update(accountId, data);
          results.profilesUpdated++;
        } else {
          await Admin.create({ ...data, accountId });
          results.profilesCreated++;
        }
        break;
    }
  }

  /* HELPER METHODS */
  
  // Map headers cho sinh vi√™n
  static mapSinhVienHeaders(headerRow) {
    const headers = {};
    
    headerRow.eachCell((cell, colNumber) => {
      const cellValue = cell.value ? cell.value.toString().toLowerCase().trim() : '';
      
      if (cellValue.includes('m√£') && (cellValue.includes('sinh vi√™n') || cellValue.includes('sv'))) {
        headers.maSinhVien = colNumber;
      } else if (cellValue.includes('t√™n') || cellValue.includes('h·ªç t√™n')) {
        headers.hoTen = colNumber;
      } else if (cellValue.includes('email') && !cellValue.includes('c√° nh√¢n')) {
        headers.email = colNumber;
      } else if (cellValue.includes('email') && cellValue.includes('c√° nh√¢n')) {
        headers.emailCaNhan = colNumber;
      } else if (cellValue.includes('m·∫≠t kh·∫©u') || cellValue.includes('password')) {
        headers.matKhau = colNumber;
      } else if (cellValue.includes('l·ªõp') || cellValue.includes('class')) {
        headers.lop = colNumber;
      } else if (cellValue.includes('khoa') && !cellValue.includes('kh√≥a')) {
        headers.khoa = colNumber;
      } else if (cellValue.includes('ng√†nh')) {
        headers.nganh = colNumber;
      } else if (cellValue.includes('kh√≥a') && cellValue.includes('h·ªçc')) {
        headers.khoaHoc = colNumber;
      } else if (cellValue.includes('ng√†y sinh') || cellValue.includes('sinh nh·∫≠t')) {
        headers.ngaySinh = colNumber;
      } else if (cellValue.includes('gi·ªõi t√≠nh') || cellValue.includes('gender')) {
        headers.gioiTinh = colNumber;
      } else if (cellValue.includes('ƒë·ªãa ch·ªâ') || cellValue.includes('address')) {
        headers.diaChi = colNumber;
      } else if (cellValue.includes('ƒëi·ªán tho·∫°i') || cellValue.includes('phone') || cellValue.includes('sdt')) {
        headers.soDienThoai = colNumber;
      } else if (cellValue.includes('gpa') || cellValue.includes('ƒëi·ªÉm')) {
        headers.gpa = colNumber;
      } else if (cellValue.includes('t√¨nh tr·∫°ng') || cellValue.includes('tr·∫°ng th√°i')) {
        headers.tinhTrangHocTap = colNumber;
      } else if (cellValue.includes('v·ªã tr√≠') && (cellValue.includes('·ª©ng tuy·ªÉn') || cellValue.includes('mu·ªën') || cellValue.includes('th·ª±c t·∫≠p'))) {
        headers.viTriMuonUngTuyen = colNumber;
        console.log('üîç Found v·ªã tr√≠ column at:', colNumber, 'with value:', cellValue);
      } else if (cellValue.includes('ƒë∆°n v·ªã') && cellValue.includes('th·ª±c t·∫≠p')) {
        headers.donViThucTap = colNumber;
        console.log('üîç Found ƒë∆°n v·ªã column at:', colNumber, 'with value:', cellValue);
      } else if (cellValue.includes('nguy·ªán v·ªçng') && cellValue.includes('tt')) {
        headers.nguyenVongThucTap = colNumber;
        console.log('üîç Found nguy·ªán v·ªçng column at:', colNumber, 'with value:', cellValue);
      } else if (cellValue.includes('gi·∫£ng vi√™n') && cellValue.includes('h∆∞·ªõng d·∫´n')) {
        headers.giangVienHuongDan = colNumber;
        console.log('üîç Found gi·∫£ng vi√™n column at:', colNumber, 'with value:', cellValue);
      }
    });
    
    return headers;
  }

  // Map headers cho gi·∫£ng vi√™n
  static mapGiangVienHeaders(headerRow) {
    const headers = {};
    
    headerRow.eachCell((cell, colNumber) => {
      const cellValue = cell.value ? cell.value.toString().toLowerCase().trim() : '';
      
      if (cellValue.includes('m√£') && cellValue.includes('gi·∫£ng vi√™n')) {
        headers.maGiangVien = colNumber;
      } else if (cellValue.includes('t√™n') || cellValue.includes('h·ªç t√™n')) {
        headers.hoTen = colNumber;
      } else if (cellValue.includes('email') && !cellValue.includes('c√° nh√¢n')) {
        headers.email = colNumber;
      } else if (cellValue.includes('email') && cellValue.includes('c√° nh√¢n')) {
        headers.emailCaNhan = colNumber;
      } else if (cellValue.includes('m·∫≠t kh·∫©u') || cellValue.includes('password')) {
        headers.matKhau = colNumber;
      } else if (cellValue.includes('khoa') && !cellValue.includes('kh√≥a')) {
        headers.khoa = colNumber;
      } else if (cellValue.includes('b·ªô m√¥n') || cellValue.includes('bo mon')) {
        headers.boMon = colNumber;
      } else if (cellValue.includes('ch·ª©c v·ª•') || cellValue.includes('position')) {
        headers.chucVu = colNumber;
      } else if (cellValue.includes('h·ªçc v·ªã') || cellValue.includes('degree')) {
        headers.hocVi = colNumber;
      } else if (cellValue.includes('chuy√™n m√¥n') || cellValue.includes('specialty')) {
        headers.chuyenMon = colNumber;
      } else if (cellValue.includes('ƒëi·ªán tho·∫°i') || cellValue.includes('phone') || cellValue.includes('sdt')) {
        headers.soDienThoai = colNumber;
      } else if (cellValue.includes('ƒë·ªãa ch·ªâ') || cellValue.includes('address')) {
        headers.diaChi = colNumber;
      } else if (cellValue.includes('kinh nghi·ªám') || cellValue.includes('experience')) {
        headers.kinhNghiemLamViec = colNumber;
      } else if (cellValue.includes('b·∫±ng c·∫•p') || cellValue.includes('certificate')) {
        headers.bangCap = colNumber;
      }
    });
    
    return headers;
  }

  // Map headers cho doanh nghi·ªáp
  static mapDoanhNghiepHeaders(headerRow) {
    const headers = {};
    
    console.log('üîç Mapping doanh nghiep headers...');
    
    headerRow.eachCell((cell, colNumber) => {
      const rawValue = this.getCellValue(headerRow, colNumber);
      if (!rawValue) return;
      
      // Normalize v√† lowercase ƒë·ªÉ so s√°nh
      const cellValue = rawValue.toLowerCase()
        .replace(/\s+/g, ' ') // Replace multiple spaces with single space
        .trim();
      
      console.log(`  Column ${colNumber}: "${rawValue}" -> "${cellValue}"`);
      
      // Mapping v·ªõi nhi·ªÅu pattern kh√°c nhau - ∆∞u ti√™n exact match tr∆∞·ªõc
      if (this.matchesAny(cellValue, ['m√£ doanh nghi·ªáp', 'ma doanh nghiep', 'm√£ dn', 'ma dn', 'company code'])) {
        headers.maDoanhNghiep = colNumber;
        console.log(`    ‚úÖ Mapped to maDoanhNghiep`);
      } else if (cellValue === 't√™n c√¥ng ty' || cellValue === 'ten cong ty') {
        headers.tenCongTy = colNumber;
        console.log(`    ‚úÖ Mapped to tenCongTy`);
      } else if (cellValue === 't√™n ng∆∞·ªùi li√™n h·ªá' || cellValue === 'ten nguoi lien he') {
        headers.tenNguoiLienHe = colNumber;
        console.log(`    ‚úÖ Mapped to tenNguoiLienHe`);
      } else if (cellValue === 'email' && !cellValue.includes('c√¥ng ty') && !cellValue.includes('cong ty')) {
        headers.email = colNumber;
        console.log(`    ‚úÖ Mapped to email`);
      } else if (cellValue === 'email c√¥ng ty' || cellValue === 'email cong ty') {
        headers.emailCongTy = colNumber;
        console.log(`    ‚úÖ Mapped to emailCongTy`);
      } else if (this.matchesAny(cellValue, ['m·∫≠t kh·∫©u', 'mat khau', 'password', 'pass'])) {
        headers.matKhau = colNumber;
        console.log(`    ‚úÖ Mapped to matKhau`);
      } else if (cellValue === 'ch·ª©c v·ª• ng∆∞·ªùi li√™n h·ªá' || cellValue === 'chuc vu nguoi lien he') {
        headers.chucVuNguoiLienHe = colNumber;
        console.log(`    ‚úÖ Mapped to chucVuNguoiLienHe`);
      } else if (cellValue === 'ƒë·ªãa ch·ªâ c√¥ng ty' || cellValue === 'dia chi cong ty') {
        headers.diaChiCongTy = colNumber;
        console.log(`    ‚úÖ Mapped to diaChiCongTy`);
      } else if (this.matchesAny(cellValue, ['s·ªë ƒëi·ªán tho·∫°i', 'so dien thoai', 'ƒëi·ªán tho·∫°i', 'dien thoai', 'phone', 'sdt', 'tel'])) {
        headers.soDienThoai = colNumber;
        console.log(`    ‚úÖ Mapped to soDienThoai`);
      } else if (this.matchesAny(cellValue, ['website', 'web site', 'web', 'url'])) {
        headers.website = colNumber;
        console.log(`    ‚úÖ Mapped to website`);
      } else if (this.matchesAny(cellValue, ['lƒ©nh v·ª±c ho·∫°t ƒë·ªông', 'linh vuc hoat dong', 'lƒ©nh v·ª±c', 'linh vuc', 'field', 'business field'])) {
        headers.linhVucHoatDong = colNumber;
        console.log(`    ‚úÖ Mapped to linhVucHoatDong`);
      } else if (this.matchesAny(cellValue, ['quy m√¥ nh√¢n s·ª±', 'quy mo nhan su', 'quy m√¥', 'quy mo', 'nh√¢n s·ª±', 'nhan su', 'size', 'staff size'])) {
        headers.quyMoNhanSu = colNumber;
        console.log(`    ‚úÖ Mapped to quyMoNhanSu`);
      } else if (cellValue === 'm√¥ t·∫£ c√¥ng ty' || cellValue === 'mo ta cong ty') {
        headers.moTaCongTy = colNumber;
        console.log(`    ‚úÖ Mapped to moTaCongTy`);
      } else if (this.matchesAny(cellValue, ['y√™u c·∫ßu th·ª±c t·∫≠p', 'yeu cau thuc tap', 'y√™u c·∫ßu', 'yeu cau', 'requirements'])) {
        headers.yeuCauThucTap = colNumber;
        console.log(`    ‚úÖ Mapped to yeuCauThucTap`);
      } else if (this.matchesAny(cellValue, ['s·ªë l∆∞·ª£ng nh·∫≠n th·ª±c t·∫≠p', 'so luong nhan thuc tap', 's·ªë l∆∞·ª£ng', 'so luong', 'quantity'])) {
        headers.soLuongNhanThucTap = colNumber;
        console.log(`    ‚úÖ Mapped to soLuongNhanThucTap`);
      } else if (this.matchesAny(cellValue, ['th·ªùi gian th·ª±c t·∫≠p', 'thoi gian thuc tap', 'th·ªùi gian', 'thoi gian', 'duration'])) {
        headers.thoiGianThucTap = colNumber;
        console.log(`    ‚úÖ Mapped to thoiGianThucTap`);
      } else if ((cellValue.includes('ƒë·ªãa ch·ªâ') || cellValue.includes('dia chi')) && (cellValue.includes('th·ª±c t·∫≠p') || cellValue.includes('thuc tap'))) {
        headers.diaChiThucTap = colNumber;
        console.log(`    ‚úÖ Mapped to diaChiThucTap`);
      } else if (this.matchesAny(cellValue, ['tr·∫°ng th√°i h·ª£p t√°c', 'trang thai hop tac', 'tr·∫°ng th√°i', 'trang thai', 'status'])) {
        headers.trangThaiHopTac = colNumber;
        console.log(`    ‚úÖ Mapped to trangThaiHopTac`);
      } else {
        console.log(`    ‚ùå No mapping found`);
      }
    });
    
    console.log('üìã Final header mapping:', headers);
    return headers;
  }

  // Helper method ƒë·ªÉ check multiple patterns
  static matchesAny(text, patterns) {
    return patterns.some(pattern => text.includes(pattern));
  }

  // Map headers cho admin
  static mapAdminHeaders(headerRow) {
    const headers = {};
    
    headerRow.eachCell((cell, colNumber) => {
      const cellValue = cell.value ? cell.value.toString().toLowerCase().trim() : '';
      
      if (cellValue.includes('user') && cellValue.includes('id') || cellValue.includes('m√£')) {
        headers.userId = colNumber;
      } else if (cellValue.includes('t√™n') || cellValue.includes('h·ªç t√™n')) {
        headers.fullName = colNumber;
      } else if (cellValue.includes('email')) {
        headers.email = colNumber;
      } else if (cellValue.includes('m·∫≠t kh·∫©u') || cellValue.includes('password')) {
        headers.matKhau = colNumber;
      } else if (cellValue.includes('ƒëi·ªán tho·∫°i') || cellValue.includes('phone') || cellValue.includes('sdt')) {
        headers.phone = colNumber;
      } else if (cellValue.includes('ch·ª©c v·ª•') || cellValue.includes('position')) {
        headers.position = colNumber;
      }
    });
    
    return headers;
  }

  // Validate d·ªØ li·ªáu sinh vi√™n
  static validateSinhVienData(data, rowNumber) {
    if (!data.maSinhVien) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu m√£ sinh vi√™n`);
    }
    if (!data.hoTen) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu h·ªç t√™n`);
    }
    if (!data.email) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu email`);
    }
    if (data.email && !this.isValidEmail(data.email)) {
      throw new Error(`H√†ng ${rowNumber}: Email kh√¥ng h·ª£p l·ªá`);
    }
  }

  // Validate d·ªØ li·ªáu sinh vi√™n profile (kh√¥ng nghi√™m ng·∫∑t)
  static validateSinhVienProfileData(data, rowNumber) {
    // Ch·ªâ validate email format n·∫øu c√≥ email
    if (data.email && !this.isValidEmail(data.email)) {
      throw new Error(`H√†ng ${rowNumber}: Email kh√¥ng h·ª£p l·ªá`);
    }
    // Kh√¥ng b·∫Øt bu·ªôc m√£ sinh vi√™n, h·ªç t√™n ƒë·ªÉ cho ph√©p import linh ho·∫°t
  }

  // Validate d·ªØ li·ªáu gi·∫£ng vi√™n
  static validateGiangVienData(data, rowNumber) {
    if (!data.maGiangVien) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu m√£ gi·∫£ng vi√™n`);
    }
    if (!data.hoTen) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu h·ªç t√™n`);
    }
    if (!data.email) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu email`);
    }
    if (!data.khoa) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu th√¥ng tin khoa`);
    }
    if (data.email && !this.isValidEmail(data.email)) {
      throw new Error(`H√†ng ${rowNumber}: Email kh√¥ng h·ª£p l·ªá`);
    }
  }

  // Validate d·ªØ li·ªáu doanh nghi·ªáp
  static validateDoanhNghiepData(data, rowNumber) {
    if (!data.maDoanhNghiep) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu m√£ doanh nghi·ªáp`);
    }
    if (!data.tenCongTy) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu t√™n c√¥ng ty`);
    }
    if (!data.tenNguoiLienHe) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu t√™n ng∆∞·ªùi li√™n h·ªá`);
    }
    if (!data.email) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu email`);
    }
    if (!data.diaChiCongTy) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu ƒë·ªãa ch·ªâ c√¥ng ty`);
    }
    if (!data.soDienThoai) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu s·ªë ƒëi·ªán tho·∫°i`);
    }
    if (data.email && !this.isValidEmail(data.email)) {
      throw new Error(`H√†ng ${rowNumber}: Email kh√¥ng h·ª£p l·ªá`);
    }
  }

  // Validate d·ªØ li·ªáu admin
  static validateAdminData(data, rowNumber) {
    if (!data.userId) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu User ID`);
    }
    if (!data.fullName) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu h·ªç t√™n`);
    }
    if (!data.email) {
      throw new Error(`H√†ng ${rowNumber}: Thi·∫øu email`);
    }
    if (data.email && !this.isValidEmail(data.email)) {
      throw new Error(`H√†ng ${rowNumber}: Email kh√¥ng h·ª£p l·ªá`);
    }
  }

  // Utility methods
  static getCellValue(row, columnNumber) {
    if (!columnNumber) return null;
    
    try {
      const cell = row.getCell(columnNumber);
      
      if (!cell.value) return null;
      
      // X·ª≠ l√Ω c√°c ki·ªÉu d·ªØ li·ªáu kh√°c nhau
      let value = cell.value;
      
      // N·∫øu l√† object (c√≥ th·ªÉ l√† date ho·∫∑c formula)
      if (typeof value === 'object') {
        if (value.result !== undefined) {
          // Formula result
          value = value.result;
        } else if (value instanceof Date) {
          // Date object
          value = value.toISOString().split('T')[0]; // Format YYYY-MM-DD
        } else {
          // Other objects, convert to string
          value = JSON.stringify(value);
        }
      }
      
      // Convert to string and clean up
      const stringValue = value.toString().trim();
      
      // Remove any non-printable characters and normalize Unicode
      return stringValue.replace(/[\x00-\x1F\x7F-\x9F]/g, '').normalize('NFC');
      
    } catch (error) {
      console.warn(`Warning: Could not read cell at column ${columnNumber}:`, error.message);
      return null;
    }
  }

  static isEmptyRow(row) {
    let isEmpty = true;
    
    try {
      row.eachCell((cell) => {
        const value = this.getCellValue(row, cell.col);
        if (value && value !== '') {
          isEmpty = false;
        }
      });
    } catch (error) {
      console.warn('Warning: Could not check if row is empty:', error.message);
      return false; // Assume not empty if can't check
    }
    
    return isEmpty;
  }

  static isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  // Parse file Excel t·ª´ Google Form
  static async parseGoogleFormFile(filePath) {
    try {
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(filePath);
      
      const worksheet = workbook.worksheets[0];
      if (!worksheet) {
        throw new Error('File Excel kh√¥ng c√≥ worksheet n√†o');
      }

      const result = {
        data: [],
        errors: [],
        totalRows: 0
      };

      // Mapping c·ªôt t·ª´ Google Form (d·ª±a v√†o header row)
      const headerRow = worksheet.getRow(1);
      const columnMapping = this.createGoogleFormColumnMapping(headerRow);
      
      if (!columnMapping.isValid) {
        return {
          data: [],
          errors: ['File Excel kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ Google Form'],
          totalRows: 0
        };
      }

      // ƒê·ªçc d·ªØ li·ªáu t·ª´ row 2 tr·ªü ƒëi
      let rowIndex = 2;
      worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
        if (rowNumber === 1) return; // Skip header

        try {
          const rowData = this.parseGoogleFormRow(row, columnMapping, rowNumber);
          if (rowData) {
            result.data.push(rowData);
          }
          result.totalRows++;
        } catch (error) {
          result.errors.push(`D√≤ng ${rowNumber}: ${error.message}`);
          result.totalRows++;
        }
      });

      return result;
    } catch (error) {
      console.error('Error parsing Google Form file:', error);
      throw new Error(`L·ªói khi ƒë·ªçc file Google Form: ${error.message}`);
    }
  }

  // T·∫°o mapping c·ªôt t·ª´ header c·ªßa Google Form
  static createGoogleFormColumnMapping(headerRow) {
    const headers = [];
    headerRow.eachCell((cell, colNumber) => {
      headers.push(cell.value ? cell.value.toString().toLowerCase() : '');
    });

    // Mapping c√°c c·ªôt c·∫ßn thi·∫øt
    const mapping = {
      timestamp: this.findColumnIndex(headers, ['timestamp', 'd·∫•u th·ªùi gian']),
      maSinhVien: this.findColumnIndex(headers, ['m√£ sinh vi√™n']),
      hoTen: this.findColumnIndex(headers, ['h·ªç v√† t√™n', 'h·ªç t√™n']),
      ngaySinh: this.findColumnIndex(headers, ['ng√†y sinh']),
      soDienThoai: this.findColumnIndex(headers, ['s·ªë ƒëi·ªán tho·∫°i', 'ƒëi·ªán tho·∫°i']),
      email: this.findColumnIndex(headers, ['email']),
      lop: this.findColumnIndex(headers, ['l·ªõp theo h·ªçc', 'l·ªõp']),
      nguyenVong: this.findColumnIndex(headers, ['em l·ª±a ch·ªçn nguy·ªán v·ªçng', 'nguy·ªán v·ªçng']),
      tenCongTy: this.findColumnIndex(headers, ['t√™n c√¥ng ty', 'c√¥ng ty']),
      diaChiCongTy: this.findColumnIndex(headers, ['ƒë·ªãa ch·ªâ c√¥ng ty']),
      nguoiLienHe: this.findColumnIndex(headers, ['ng∆∞·ªùi li√™n h·ªá']),
      viTriMongMuon: this.findColumnIndex(headers, ['v·ªã tr√≠', 'ng√†nh ngh·ªÅ mong mu·ªën']),
      ghiChu: this.findColumnIndex(headers, ['ghi ch√∫'])
    };

    // Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
    const requiredFields = ['maSinhVien', 'hoTen', 'email', 'nguyenVong', 'viTriMongMuon'];
    const missingFields = requiredFields.filter(field => mapping[field] === -1);

    return {
      ...mapping,
      isValid: missingFields.length === 0,
      missingFields
    };
  }

  // T√¨m index c·ªßa c·ªôt d·ª±a v√†o c√°c t·ª´ kh√≥a
  static findColumnIndex(headers, keywords) {
    for (let i = 0; i < headers.length; i++) {
      const header = headers[i];
      for (const keyword of keywords) {
        if (header.includes(keyword.toLowerCase())) {
          return i + 1; // Excel columns are 1-based
        }
      }
    }
    return -1;
  }

  // Parse m·ªôt row t·ª´ Google Form
  static parseGoogleFormRow(row, mapping, rowNumber) {
    const getValue = (colIndex) => {
      if (colIndex === -1) return null;
      const cell = row.getCell(colIndex);
      return cell.value ? cell.value.toString().trim() : null;
    };

    const maSinhVien = getValue(mapping.maSinhVien);
    if (!maSinhVien || !/^\d{10}$/.test(maSinhVien)) {
      throw new Error('M√£ sinh vi√™n kh√¥ng h·ª£p l·ªá (ph·∫£i l√† 10 ch·ªØ s·ªë)');
    }

    const hoTen = getValue(mapping.hoTen);
    if (!hoTen) {
      throw new Error('H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }

    const email = getValue(mapping.email);
    if (!email || !this.isValidEmail(email)) {
      throw new Error('Email kh√¥ng h·ª£p l·ªá');
    }

    const nguyenVong = getValue(mapping.nguyenVong);
    const nguyenVongValue = nguyenVong && nguyenVong.toLowerCase().includes('t·ª± li√™n h·ªá') 
      ? 'tu-lien-he' 
      : 'khoa-gioi-thieu';

    // Parse ng√†y sinh
    let ngaySinh = null;
    const ngaySinhRaw = getValue(mapping.ngaySinh);
    if (ngaySinhRaw) {
      try {
        // Handle multiple date formats
        if (ngaySinhRaw instanceof Date) {
          ngaySinh = ngaySinhRaw.toISOString().split('T')[0];
        } else if (typeof ngaySinhRaw === 'string') {
          // Try DD/MM/YYYY format
          const dateParts = ngaySinhRaw.split('/');
          if (dateParts.length === 3) {
            const day = dateParts[0].padStart(2, '0');
            const month = dateParts[1].padStart(2, '0');
            const year = dateParts[2];
            ngaySinh = `${year}-${month}-${day}`;
          }
        }
      } catch (error) {
        console.warn(`Kh√¥ng th·ªÉ parse ng√†y sinh: ${ngaySinhRaw}`);
      }
    }

    return {
      ma_sinh_vien: maSinhVien,
      ho_ten: hoTen,
      ngay_sinh: ngaySinh,
      so_dien_thoai: getValue(mapping.soDienThoai),
      email: email,
      lop: getValue(mapping.lop),
      nguyen_vong_thuc_tap: nguyenVongValue,
      ten_cong_ty: nguyenVongValue === 'tu-lien-he' ? getValue(mapping.tenCongTy) : null,
      dia_chi_cong_ty: nguyenVongValue === 'tu-lien-he' ? getValue(mapping.diaChiCongTy) : null,
      nguoi_lien_he: nguyenVongValue === 'tu-lien-he' ? getValue(mapping.nguoiLienHe) : null,
      vi_tri_mong_muon: getValue(mapping.viTriMongMuon),
      ghi_chu_thuc_tap: getValue(mapping.ghiChu),
      ngay_dang_ky_thuc_tap: new Date().toISOString().slice(0, 19).replace('T', ' ')
    };
  }

  // C·∫≠p nh·∫≠t th√¥ng tin th·ª±c t·∫≠p cho sinh vi√™n
  static async updateInternshipInfo(data, importerId) {
    const connection = require('../database/connection');
    
    const result = {
      successful: 0,
      failed: 0,
      errors: [],
      updated: [],
      notFound: []
    };

    for (const item of data) {
      try {
        // T√¨m sinh vi√™n theo m√£ sinh vi√™n
        const findQuery = 'SELECT id FROM sinh_vien WHERE ma_sinh_vien = ?';
        
        await new Promise((resolve, reject) => {
          connection.query(findQuery, [item.ma_sinh_vien], (error, results) => {
            if (error) {
              reject(error);
              return;
            }

            if (results.length === 0) {
              result.notFound.push(item.ma_sinh_vien);
              result.failed++;
              resolve();
              return;
            }

            const sinhVienId = results[0].id;
            
            // C·∫≠p nh·∫≠t th√¥ng tin th·ª±c t·∫≠p
            const updateQuery = `
              UPDATE sinh_vien 
              SET nguyen_vong_thuc_tap = ?,
                  ten_cong_ty = ?,
                  dia_chi_cong_ty = ?,
                  nguoi_lien_he = ?,
                  vi_tri_mong_muon = ?,
                  ghi_chu_thuc_tap = ?,
                  ngay_dang_ky_thuc_tap = ?,
                  trang_thai_phan_cong = 'chua-phan-cong'
              WHERE id = ?
            `;

            const updateValues = [
              item.nguyen_vong_thuc_tap,
              item.ten_cong_ty,
              item.dia_chi_cong_ty,
              item.nguoi_lien_he,
              item.vi_tri_mong_muon,
              item.ghi_chu_thuc_tap,
              item.ngay_dang_ky_thuc_tap,
              sinhVienId
            ];

            connection.query(updateQuery, updateValues, (updateError, updateResults) => {
              if (updateError) {
                result.errors.push(`L·ªói c·∫≠p nh·∫≠t sinh vi√™n ${item.ma_sinh_vien}: ${updateError.message}`);
                result.failed++;
              } else {
                result.updated.push(item.ma_sinh_vien);
                result.successful++;
              }
              resolve();
            });
          });
        });
      } catch (error) {
        result.errors.push(`L·ªói x·ª≠ l√Ω sinh vi√™n ${item.ma_sinh_vien}: ${error.message}`);
        result.failed++;
      }
    }

    // L∆∞u l·ªãch s·ª≠ import
    try {
      const historyQuery = `
        INSERT INTO lich_su_import_thuc_tap 
        (ten_file, so_ban_ghi_thanh_cong, so_ban_ghi_loi, chi_tiet_loi, nguoi_import_id)
        VALUES (?, ?, ?, ?, ?)
      `;
      
      const historyValues = [
        'Google Form Import',
        result.successful,
        result.failed,
        JSON.stringify({
          errors: result.errors,
          notFound: result.notFound
        }),
        importerId
      ];

      await new Promise((resolve, reject) => {
        connection.query(historyQuery, historyValues, (error) => {
          if (error) reject(error);
          else resolve();
        });
      });
    } catch (error) {
      console.warn('Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ import:', error.message);
    }

    return result;
  }

  // T·ª± ƒë·ªông ph√¢n lo·∫°i sinh vi√™n theo v·ªã tr√≠ mong mu·ªën
  static async autoClassifyStudents() {
    const connection = require('../database/connection');

    const result = {
      totalClassified: 0,
      classifications: {},
      errors: []
    };

    try {
      // L·∫•y danh s√°ch sinh vi√™n ch∆∞a ph√¢n c√¥ng v√† c√≥ v·ªã tr√≠ mong mu·ªën
      const getStudentsQuery = `
        SELECT id, ma_sinh_vien, ho_ten, vi_tri_mong_muon
        FROM sinh_vien 
        WHERE trang_thai_phan_cong = 'chua-phan-cong' 
        AND vi_tri_mong_muon IS NOT NULL
        AND vi_tri_mong_muon != ''
      `;

      const students = await new Promise((resolve, reject) => {
        connection.query(getStudentsQuery, (error, results) => {
          if (error) reject(error);
          else resolve(results);
        });
      });

      // Ph√¢n lo·∫°i theo v·ªã tr√≠
      for (const student of students) {
        const viTri = student.vi_tri_mong_muon;
        const nhomThucTap = this.generateGroupName(viTri);

        try {
          const updateQuery = `
            UPDATE sinh_vien 
            SET nhom_thuc_tap = ?, trang_thai_phan_cong = 'da-xep-nhom'
            WHERE id = ?
          `;

          await new Promise((resolve, reject) => {
            connection.query(updateQuery, [nhomThucTap, student.id], (error) => {
              if (error) reject(error);
              else resolve();
            });
          });

          // Th·ªëng k√™
          if (!result.classifications[viTri]) {
            result.classifications[viTri] = [];
          }
          result.classifications[viTri].push({
            maSinhVien: student.ma_sinh_vien,
            hoTen: student.ho_ten,
            nhomThucTap: nhomThucTap
          });

          result.totalClassified++;
        } catch (error) {
          result.errors.push(`L·ªói ph√¢n lo·∫°i sinh vi√™n ${student.ma_sinh_vien}: ${error.message}`);
        }
      }

    } catch (error) {
      result.errors.push(`L·ªói t·ªïng qu√°t khi ph√¢n lo·∫°i: ${error.message}`);
    }

    return result;
  }

  // T·∫°o t√™n nh√≥m th·ª±c t·∫≠p d·ª±a v√†o v·ªã tr√≠
  static generateGroupName(viTri) {
    const mapping = {
      'L·∫≠p tr√¨nh vi√™n (Developer)': 'DEV',
      'Thi·∫øt k·∫ø website': 'DESIGN',
      'Ph√¢n t√≠ch & thi·∫øt k·∫ø h·ªá th·ªëng': 'ANALYST',
      'Qu·∫£n tr·ªã m·∫°ng': 'NETWORK',
      'Qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu': 'DATABASE',
      'Tester': 'QA',
      'H·ªó tr·ª£ k·ªπ thu·∫≠t (IT Support)': 'SUPPORT',
      'AI & IoT': 'AI_IOT',
      'Kh√°c': 'OTHER'
    };

    const prefix = mapping[viTri] || 'OTHER';
    const timestamp = new Date().getFullYear().toString().slice(-2);
    return `${prefix}_${timestamp}`;
  }
}

module.exports = ExcelImportService;